
===== File: /src/App.js =====
// src/App.jsx
import React, { useEffect } from 'react';
import { Routes, Route, Link, BrowserRouter } from 'react-router-dom';
import { useAuth, AuthProvider } from './contexts/AuthContext';

// Import Pages
import LoginPage from './pages/LoginPage';
import SignupPage from './pages/SignupPage';
import DashboardPage from './pages/DashboardPage';
import ContentPage from './pages/ContentPage';
import HomePage from './pages/HomePage';
import UserProfilePage from './pages/UserProfilePage';

// Admin Pages
import AdminRoute from './components/common/AdminRoute';
import AdminDashboardPage from './pages/admin/AdminDashboardPage';
import AdminContentListPage from './pages/admin/AdminContentListPage';
import AdminCreateContentPage from './pages/admin/AdminCreateContentPage';
import AdminEditContentPage from './pages/admin/AdminEditContentPage';
import AdminUserManagementPage from './pages/admin/AdminUserManagementPage'; // New

// Creator Pages & Components
import CreatorRoute from './components/common/CreatorRoute'; // New
import CreatorDashboardPage from './pages/creator/CreatorDashboardPage'; // New

// Import Components
import ProtectedRoute from './components/common/ProtectedRoute';
import Navbar from './components/common/Navbar';
import SimpleMermaidTest from './components/common/SimpleMermaidTest';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const App = () => {
  const { user } = useAuth();

  useEffect(() => {
    const rootEl = document.documentElement;
    const bodyEl = document.body;

    rootEl.classList.remove('dark');
    ['font-size-small', 'font-size-medium', 'font-size-large', 'font-size-xlarge'].forEach(cls => rootEl.classList.remove(cls));
    bodyEl.classList.remove('theme-high-contrast', 'font-dyslexic', 'theme-light');

    if (user && user.preferences) {
      const { theme, fontSize, dyslexiaFontEnabled } = user.preferences;
      if (theme === 'dark') rootEl.classList.add('dark');
      else if (theme === 'high-contrast') bodyEl.classList.add('theme-high-contrast');
      else bodyEl.classList.add('theme-light');
      rootEl.classList.add(`font-size-${fontSize || 'medium'}`);
      if (dyslexiaFontEnabled) bodyEl.classList.add('font-dyslexic');
    } else {
      bodyEl.classList.add('theme-light');
      rootEl.classList.add('font-size-medium');
    }
  }, [user]);

  return (
    <div className="min-h-screen flex flex-col">
       <ToastContainer position="bottom-right" autoClose={5000} hideProgressBar={false} newestOnTop={false} closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover theme="colored" />
      <Navbar />
      <main className="flex-grow container mx-auto px-4 py-8">
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/signup" element={<SignupPage />} />
          
          <Route element={<ProtectedRoute />}>
            <Route path="/dashboard" element={<DashboardPage />} />
            <Route path="/content/:topic" element={<ContentPage />} />
            <Route path="/profile" element={<UserProfilePage />} />
          </Route>

          {/* Admin Routes */}
          <Route element={<AdminRoute />}>
            <Route path="/admin" element={<AdminDashboardPage />} />
            <Route path="/admin/content" element={<AdminContentListPage />} />
            <Route path="/admin/content/create" element={<AdminCreateContentPage />} />
            <Route path="/admin/content/edit/:contentId" element={<AdminEditContentPage />} />
            <Route path="/admin/users" element={<AdminUserManagementPage />} /> {/* New admin route */}
          </Route>

          {/* Creator Routes */}
          <Route element={<CreatorRoute />}>
            <Route path="/creator/dashboard" element={<CreatorDashboardPage />} />
            {/* Creators use the same components as Admins for content management for now */}
            <Route path="/creator/content" element={<AdminContentListPage />} />
            <Route path="/creator/content/create" element={<AdminCreateContentPage />} />
            <Route path="/creator/content/edit/:contentId" element={<AdminEditContentPage />} />
          </Route>

          <Route path="*" element={<div className="text-center py-10"><h2 className="text-2xl font-bold">404 Not Found</h2><Link to="/" className="button-primary mt-4 inline-block">Go Home</Link></div>} />
        </Routes>
      </main>
      <footer className="text-center p-4 mt-auto border-t border-[var(--color-border)] text-[var(--color-text-secondary)] text-sm">
        Â© {new Date().getFullYear()} Accessible Learning Portal.
        {user && user.preferences && (
            <div className="text-xs opacity-70">
                Theme: {user.preferences.theme}, Font: {user.preferences.fontSize}, Dyslexic: {user.preferences.dyslexiaFontEnabled ? 'On' : 'Off'}
            </div>
        )}
        
      </footer>
    </div>
  );
}

export default App;

===== File: /src/App.test.js =====
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


===== File: /src/components/UserProfile.jsx =====
// src/components/UserProfile.jsx
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';

const UserProfile = () => {
  const { user, updateUserPreferences, loading: authLoading, error: authError } = useAuth();
  const [prefs, setPrefs] = useState({ /* ... initial prefs ... */
    readingLevel: 'basic', fontSize: 'medium', theme: 'light',
    dyslexiaFontEnabled: false, preferredContentMode: 'text', ttsEnabled: false,
  });
  const [message, setMessage] = useState('');
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    if (user?.preferences) {
      setPrefs(prev => ({ ...prev, ...user.preferences }));
    }
  }, [user]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setPrefs(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault(); setMessage(''); setIsSaving(true);
    try {
      await updateUserPreferences(prefs);
      setMessage('Preferences updated successfully!');
    } catch (updateError) {
      setMessage(`Error: ${updateError.message || 'Failed to update.'}`);
    } finally { setIsSaving(false); }
  };

  if (authLoading && !user) return <p className="text-center p-4">Loading profile...</p>;
  if (!user) return <p className="text-center p-4">Please log in.</p>;

  return (
    <div className="max-w-lg mx-auto card"> {/* Using .card class */}
      <h1>User Profile & Preferences</h1>
      <div className="mb-4">
        <p><span className="font-semibold">Email:</span> {user.email}</p>
        <p><span className="font-semibold">Name:</span> {user.name || 'N/A'}</p>
      </div>

      {authError && !message && <p className="info-error">{/* ... error ... */}</p>}
      {message && <p className={message.startsWith('Error:') ? "info-error" : "info-success"}>{message}</p>}

      <form onSubmit={handleSubmit} className="space-y-6">
        <h2>Your Preferences</h2>
        <div>
          <label htmlFor="theme" className="form-label-default">Theme:</label>
          <select name="theme" id="theme" value={prefs.theme} onChange={handleChange} className="form-input-default">
            <option value="light">Light</option>
            <option value="dark">Dark</option>
            <option value="high-contrast">High Contrast</option>
          </select>
        </div>
        <div>
          <label htmlFor="fontSize" className="form-label-default">Font Size:</label>
          <select name="fontSize" id="fontSize" value={prefs.fontSize} onChange={handleChange} className="form-input-default">
            <option value="small">Small</option> <option value="medium">Medium</option>
            <option value="large">Large</option> <option value="xlarge">X-Large</option>
          </select>
        </div>
         <div className="flex items-center">
          <input type="checkbox" name="dyslexiaFontEnabled" id="dyslexiaFontEnabled" checked={prefs.dyslexiaFontEnabled} onChange={handleChange} className="form-checkbox-default mr-2" />
          <label htmlFor="dyslexiaFontEnabled" className="form-label-default !mb-0"> {/* !mb-0 to override default label margin */}
            Enable Dyslexia-Friendly Font
          </label>
        </div>
        <div>
          <label htmlFor="readingLevel" className="form-label-default">Reading Level:</label>
          <select name="readingLevel" id="readingLevel" value={prefs.readingLevel} onChange={handleChange} className="form-input-default">
            <option value="basic">Basic</option> <option value="intermediate">Intermediate</option> <option value="advanced">Advanced</option>
          </select>
        </div>
        <div>
          <label htmlFor="preferredContentMode" className="form-label-default">Preferred Content Mode:</label>
          <select name="preferredContentMode" id="preferredContentMode" value={prefs.preferredContentMode} onChange={handleChange} className="form-input-default">
            <option value="text">Text</option> <option value="video">Video</option>
            <option value="visual">Visual Map</option> <option value="audio">Audio</option>
          </select>
        </div>
        <div className="flex items-center">
          <input type="checkbox" name="ttsEnabled" id="ttsEnabled" checked={prefs.ttsEnabled} onChange={handleChange} className="form-checkbox-default mr-2" />
          <label htmlFor="ttsEnabled" className="form-label-default !mb-0">
            Enable Text-to-Speech
          </label>
        </div>
        <button type="submit" disabled={isSaving || authLoading} className="button-primary w-full">
          {isSaving ? 'Saving...' : 'Save Preferences'}
        </button>
      </form>
    </div>
  );
};
export default UserProfile;

 

===== File: /src/components/admin/DynamicUrlInput.jsx =====
// src/components/admin/DynamicUrlInput.jsx
import React, { useState, useEffect } from 'react';

const DynamicUrlInput = ({ initialUrls = [], onChange, label = "Image URLs", placeholder = "https://example.com/image.jpg" }) => {
  const [urls, setUrls] = useState(initialUrls.length > 0 ? initialUrls : ['']);

  useEffect(() => {
    setUrls(initialUrls.length > 0 ? initialUrls : ['']);
  }, [initialUrls]);

  const handleUrlChange = (index, value) => {
    const newUrls = [...urls];
    newUrls[index] = value;
    setUrls(newUrls);
    onChange(newUrls.filter(url => url && url.trim() !== '')); // Notify parent with non-empty URLs
  };

  const addUrlField = () => {
    setUrls([...urls, '']);
  };

  const removeUrlField = (index) => {
    if (urls.length <= 1 && index === 0) { // If it's the last field, just clear it
        handleUrlChange(index, '');
        return;
    }
    const newUrls = urls.filter((_, i) => i !== index);
    setUrls(newUrls);
    onChange(newUrls.filter(url => url && url.trim() !== ''));
  };

  // Basic check if a string looks like an image URL
  const isImageUrl = (url) => {
    return typeof url === 'string' && url.match(/\.(jpeg|jpg|gif|png|webp|svg)$/) != null;
  };

  return (
    <div className="form-field-default">
      <label className="form-label-default">{label}</label>
      <div className="space-y-3">
        {urls.map((url, index) => (
          <div key={index} className="flex items-start gap-2"> {/* items-start for preview alignment */}
            <div className="flex-grow"> {/* Input field takes remaining space */}
                <input
                  type="url"
                  value={url}
                  onChange={(e) => handleUrlChange(index, e.target.value)}
                  placeholder={`${placeholder} (#${index + 1})`}
                  className="form-input-default"
                />
            </div>
            {/* Image Preview */}
            {url && isImageUrl(url.trim()) && (
              <div className="w-20 h-20 sm:w-24 sm:h-24 flex-shrink-0 bg-[var(--color-border)] rounded overflow-hidden border border-[var(--color-border)]">
                <img
                  src={url.trim()}
                  alt={`Preview ${index + 1}`}
                  className="w-full h-full object-cover"
                  onError={(e) => { 
                    // Optionally hide or show a broken image icon for the preview
                    e.target.style.display = 'none'; 
                    if(e.target.parentElement) e.target.parentElement.innerHTML = '<span class="text-xs text-red-500 p-1">Invalid</span>';
                  }}
                />
              </div>
            )}
            {/* Remove Button */}
            <button
              type="button"
              onClick={() => removeUrlField(index)}
              className="button-secondary text-sm !p-2 body-theme-high-contrast:text-hc-link body-theme-high-contrast:border-hc-link flex-shrink-0"
              aria-label={`Remove URL ${index + 1}`}
              title="Remove URL"
            >
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-4 h-4">
                <path fillRule="evenodd" d="M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.58.197-2.326.372a.75.75 0 0 0-.569.934l1.06 3.18a.75.75 0 0 0 .934.569c.795-.265 1.59-.453 2.396-.558a.75.75 0 0 0 .622-.882l-.318-2.165A2.248 2.248 0 0 1 8.75 2.5h2.5A2.248 2.248 0 0 1 13.498 4.58l-.318 2.165a.75.75 0 0 0 .622.882c.807.105 1.601.293 2.396.558a.75.75 0 0 0 .934-.569l1.06-3.18a.75.75 0 0 0-.569-.934c-.746-.175-1.53-.295-2.326-.372v-.443A2.75 2.75 0 0 0 11.25 1h-2.5ZM9.25 6.51V16h1.5V6.51l.011.002.021.002.022.002a24.32 24.32 0 0 1 2.99-.034c.795-.018 1.43.214 1.805.694.376.48.476 1.184.28 1.814l-.104.345a.75.75 0 0 1-1.341-.404l.104-.345c.098-.325.032-.65-.152-.922-.184-.271-.546-.425-1.046-.408a22.823 22.823 0 0 0-2.648.033l-.021-.002-.022-.002L9.25 6.51Z" clipRule="evenodd" />
              </svg>
            </button>
          </div>
        ))}
      </div>
      <button
        type="button"
        onClick={addUrlField}
        className="button-secondary text-sm mt-3"
      >
        + Add Another URL
      </button>
    </div>
  );
};

export default DynamicUrlInput;

===== File: /src/components/admin/TagInput.jsx =====
// src/components/admin/TagInput.jsx
import React, { useState, useEffect } from 'react';

const TagInput = ({ initialTags = [], onChange, label = "Tags", placeholder = "Add a tag and press Enter" }) => {
  const [tags, setTags] = useState(initialTags);
  const [inputValue, setInputValue] = useState('');

  useEffect(() => {
    // Sync with initialTags if it changes externally (e.g., loading data in Edit page)
    setTags(initialTags);
  }, [initialTags]);


  const handleInputChange = (e) => {
    setInputValue(e.target.value);
  };

  const handleInputKeyDown = (e) => {
    if (e.key === 'Enter' || e.key === ',') {
      e.preventDefault();
      const newTag = inputValue.trim();
      if (newTag && !tags.includes(newTag)) {
        const newTagsArray = [...tags, newTag];
        setTags(newTagsArray);
        onChange(newTagsArray); // Notify parent
      }
      setInputValue('');
    } else if (e.key === 'Backspace' && !inputValue && tags.length > 0) {
      e.preventDefault();
      const newTagsArray = tags.slice(0, -1);
      setTags(newTagsArray);
      onChange(newTagsArray); // Notify parent
    }
  };

  const removeTag = (tagToRemove) => {
    const newTagsArray = tags.filter(tag => tag !== tagToRemove);
    setTags(newTagsArray);
    onChange(newTagsArray); // Notify parent
  };

  return (
    <div className="form-field-default">
      <label className="form-label-default">{label}</label>
      <div className="form-input-default flex flex-wrap items-center gap-2 p-2 min-h-[42px]"> {/* Apply input styling to the wrapper */}
        {tags.map((tag, index) => (
          <div
            key={index}
            className="flex items-center bg-primary/20 dark:bg-primary-light/30 text-primary dark:text-primary-light text-sm font-medium px-2 py-1 rounded-full"
          >
            {tag}
            <button
              type="button"
              onClick={() => removeTag(tag)}
              className="ml-2 text-primary hover:text-primary-dark dark:text-primary-light dark:hover:text-white focus:outline-none"
              aria-label={`Remove ${tag}`}
            >
              Ã {/* x icon */}
            </button>
          </div>
        ))}
        <input
          type="text"
          value={inputValue}
          onChange={handleInputChange}
          onKeyDown={handleInputKeyDown}
          placeholder={tags.length === 0 ? placeholder : "Add another tag..."}
          className="flex-grow bg-transparent border-none focus:ring-0 p-0 text-sm text-[var(--color-text-primary)] placeholder:text-[var(--color-text-secondary)]"
        />
      </div>
       <p className="text-xs text-[var(--color-text-secondary)] mt-1">Press Enter or comma to add a tag. Backspace to remove last tag if input is empty.</p>
    </div>
  );
};

export default TagInput;

===== File: /src/components/common/AdminRoute.jsx =====
// src/components/common/AdminRoute.jsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const AdminRoute = ({ children }) => {
  const { isAuthenticated, user, loading } = useAuth();

  if (loading) {
    return <div>Loading authentication...</div>;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  if (user?.role !== 'admin') {
    // Optional: Redirect to a specific "Access Denied" page or just dashboard
    return <Navigate to="/dashboard" replace />;
    // Or: return <div><h2>Access Denied</h2><p>You do not have permission to view this page.</p></div>;
  }

  return children ? children : <Outlet />;
};

export default AdminRoute;

===== File: /src/components/common/CreatorRoute.jsx =====
// src/components/common/CreatorRoute.jsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const CreatorRoute = ({ children }) => {
  const { isAuthenticated, user, loading } = useAuth();

  if (loading) {
    return <div className="text-center p-10">Loading authentication...</div>;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  if (user?.role !== 'admin' && user?.role !== 'creator') {
    // Redirect to dashboard if not admin or creator
    return <Navigate to="/dashboard" replace />;
  }

  return children ? children : <Outlet />;
};

export default CreatorRoute;

===== File: /src/components/common/MermaidDiagram.jsx =====
// src/components/common/MermaidDiagram.jsx
import React, { useEffect, useRef, useState, useCallback } from 'react';
import mermaid from 'mermaid'; // Assuming stable v10.9.1 or similar

let globalMermaidInitializedForMain = false;

const MermaidDiagram = ({ chartData, diagramId }) => {
    const outputContainerRef = useRef(null);
    const [currentDiagramText, setCurrentDiagramText] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [errorMessage, setErrorMessage] = useState('');

    const [renderIdPrefix] = useState(
        () => diagramId || `mermaid-output-${Math.random().toString(36).substring(2, 9)}`
    );

    useEffect(() => {
        if (typeof window !== 'undefined' && !globalMermaidInitializedForMain) {
            console.log("[MermaidDiagramMain] Initializing Mermaid...");
            try {
                mermaid.initialize({
                    startOnLoad: true,
                    theme: 'default', // Let's try 'default' or 'neutral' explicitly
                    // securityLevel: 'loose', // Use with caution
                    // logLevel: 'debug' // For more verbose mermaid logs
                });
                globalMermaidInitializedForMain = true;
                console.log("[MermaidDiagramMain] Mermaid initialized.");
            } catch (e) {
                console.error("[MermaidDiagramMain] Error initializing Mermaid:", e);
                setErrorMessage(`Mermaid init failed: ${e.message}`);
            }
        }
    }, []);

    useEffect(() => {
        setCurrentDiagramText(chartData || '');
        setErrorMessage('');
    }, [chartData]);

    useEffect(() => {
        let isMounted = true;

        const renderMermaidDiagramAsync = async () => {
            if (!globalMermaidInitializedForMain) {
                if (isMounted) setErrorMessage('Mermaid not initialized.');
                return;
            }
            if (!outputContainerRef.current) {
                console.warn("[MermaidDiagramMain] outputContainerRef.current is null during render attempt.");
                return;
            }
            
            // Ensure container is clear for new render or if no data
            outputContainerRef.current.innerHTML = '';

            if (!currentDiagramText || typeof currentDiagramText !== 'string' || !currentDiagramText.trim()) {
                if (isMounted) setIsLoading(false);
                if (outputContainerRef.current) outputContainerRef.current.innerHTML = '<p class="text-[var(--color-text-secondary)] text-xs italic">No diagram data.</p>';
                return;
            }

            const isKnownDiagramType = ['graph', 'mindmap', 'flowchart', /* ... other types ... */]
                .some(keyword => currentDiagramText.trim().toLowerCase().startsWith(keyword));

            if (!isKnownDiagramType) {
                if (isMounted) {
                    // ... (render as preformatted text - same as before) ...
                    const pre = document.createElement('pre'); /* ... */ pre.textContent = currentDiagramText;
                    if (outputContainerRef.current) outputContainerRef.current.appendChild(pre);
                    setIsLoading(false); setErrorMessage('');
                }
                return;
            }

            if (isMounted) {
                setIsLoading(true);
                setErrorMessage('');
                if (outputContainerRef.current) outputContainerRef.current.innerHTML = '<p class="text-[var(--color-text-secondary)] animate-pulse">Generating diagram...</p>';
            }

            const uniqueRenderId = `${renderIdPrefix}-${Date.now()}`;
            console.log(`[MermaidDiagramMain] Attempting to render Mermaid ID: ${uniqueRenderId}`);
            console.log("[MermaidDiagramMain] Chart Data for this render:", JSON.stringify(currentDiagramText)); // Log the exact data being rendered

            try {
                const { svg, bindFunctions } = await mermaid.render(uniqueRenderId, currentDiagramText);
                console.log("[MermaidDiagramMain] SVG generated by Mermaid:", svg.substring(0, 200) + "..."); // Log part of the SVG

                if (isMounted && outputContainerRef.current) {
                    outputContainerRef.current.innerHTML = svg;
                    if (typeof bindFunctions === 'function') {
                        bindFunctions(outputContainerRef.current);
                    }
                    console.log("[MermaidDiagramMain] Diagram rendered and injected successfully.");
                    // **DEBUG: Force SVG visibility**
                    const svgElement = outputContainerRef.current.querySelector('svg');
                    if (svgElement) {
                        console.log("[MermaidDiagramMain] Found SVG Element. Setting debug styles.");
                        svgElement.style.width = '100%'; // Force width
                        svgElement.style.height = 'auto';  // Maintain aspect ratio
                        svgElement.style.minHeight = '300px'; // Ensure it has some height
                        svgElement.style.border = '2px solid limegreen'; // Make it obvious
                        svgElement.style.display = 'block'; // Ensure display is appropriate
                        // Check its children's fill/stroke
                        svgElement.querySelectorAll('*').forEach(el => {
                            if (el.getAttribute('fill') === 'none' || el.getAttribute('fill') === '#fff' || el.getAttribute('fill') === 'white') {
                                // el.setAttribute('fill', 'purple'); // TEMP DEBUG
                            }
                            if (!el.getAttribute('stroke') || el.getAttribute('stroke') === 'none' || el.getAttribute('stroke') === '#fff' || el.getAttribute('stroke') === 'white') {
                                // el.setAttribute('stroke', 'orange'); // TEMP DEBUG
                            }
                        });
                    } else {
                        console.warn("[MermaidDiagramMain] No SVG element found after innerHTML injection.");
                    }

                } else if (isMounted) {
                    console.warn("[MermaidDiagramMain] outputContainerRef became null after mermaid.render resolved, but component still mounted.");
                    setErrorMessage("Output container disappeared during render.");
                }
            } catch (error) {
                console.error("[MermaidDiagramMain] Render error:", error);
                if (isMounted) {
                    setErrorMessage(`Render error: ${error.message}. Check console.`);
                    if (outputContainerRef.current) {
                        outputContainerRef.current.innerHTML = `<pre style="color:red; white-space:pre-wrap; padding:10px; border:1px solid red;">Error: ${error.message}\n\nInput:\n${currentDiagramText.substring(0, 500)}...</pre>`;
                    }
                }
            } finally {
                if (isMounted) {
                    setIsLoading(false);
                }
            }
        };

        renderMermaidDiagramAsync();

        return () => {
            isMounted = false;
            console.log("[MermaidDiagramMain] Cleanup effect for diagram text run.");
        };
    }, [currentDiagramText, renderIdPrefix]);

    return (
        <div 
            className="mermaid-diagram-container flex flex-col justify-center items-center w-full min-h-[300px] border border-dashed p-2"
            style={{ borderColor: 'var(--color-border)', backgroundColor: 'var(--color-card-background)' }} // Explicitly use CSS vars
        >
            {isLoading && <p className="text-[var(--color-text-secondary)] animate-pulse">Generating diagram...</p>}
            {errorMessage && !isLoading && (
                <div className="p-2 text-red-700 dark:text-red-300 body-theme-high-contrast:text-hc-link">
                    <p className="font-semibold">Diagram Error:</p>
                    <pre className="text-xs whitespace-pre-wrap break-words">{errorMessage}</pre>
                </div>
            )}
            {/* This div is where the SVG is injected */}
            <div 
                ref={outputContainerRef} 
                className="w-full h-full flex justify-center items-center"
                style={{ minHeight: '250px' }} // Ensure inner div also has min height
            >
                {/* Placeholder content if needed, managed by effect */}
            </div>
        </div>
    );
};

export default MermaidDiagram;

===== File: /src/components/common/Navbar.jsx =====
// src/components/common/Navbar.jsx
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { Menu, Transition } from '@headlessui/react';
import { Fragment } from 'react';

const UserIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
      <path fillRule="evenodd" d="M18.685 19.097A9.723 9.723 0 0 0 21.75 12c0-5.385-4.365-9.75-9.75-9.75S2.25 6.615 2.25 12a9.723 9.723 0 0 0 3.065 7.097A9.716 9.716 0 0 0 12 21.75a9.716 9.716 0 0 0 6.685-2.653Zm-12.54-1.285A7.486 7.486 0 0 1 12 15a7.486 7.486 0 0 1 5.855 2.812A8.224 8.224 0 0 1 12 20.25a8.224 8.224 0 0 1-5.855-2.438ZM15.75 9a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z" clipRule="evenodd" />
    </svg>
);

const Navbar = () => {
    const { isAuthenticated, user, logout } = useAuth();
    const navigate = useNavigate();

    const handleLogout = () => {
        logout();
        navigate('/login');
    };

    const navLinkClass = "text-white hover:text-opacity-80 transition-opacity duration-150";
    const navButtonClass = "bg-white text-[var(--color-link)] hover:bg-opacity-90 dark:text-primary dark:hover:bg-slate-200 font-semibold py-1 px-3 rounded text-sm";

    return (
        <nav className="bg-primary text-white dark:bg-slate-900 body-theme-high-contrast:bg-hc-background body-theme-high-contrast:text-hc-text body-theme-high-contrast:border-b body-theme-high-contrast:border-hc-border shadow-md">
            <div className="container mx-auto px-4 py-3 flex justify-between items-center">
                <Link to="/" className={`text-xl font-bold ${navLinkClass}`}>
                    Accessible Learning
                </Link>
                <div className="space-x-2 sm:space-x-4 flex items-center">
                    {isAuthenticated && user?.role === 'admin' && (
                        <Link to="/admin" className={navLinkClass}>Admin Panel</Link>
                    )}
                    {isAuthenticated && user?.role === 'creator' && (
                        <Link to="/creator/dashboard" className={navLinkClass}>Creator Studio</Link>
                    )}

                    {isAuthenticated ? (
                        <>
                            <Link to="/dashboard" className={navLinkClass}>My Dashboard</Link>
                            <Menu as="div" className="relative inline-block text-left">
                                <div>
                                    <Menu.Button className={`inline-flex w-full justify-center items-center space-x-1 rounded-md px-1 py-1 sm:px-2 text-sm font-medium ${navLinkClass} focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75`}>
                                        <UserIcon />
                                        <span className="hidden md:inline">{user?.name || user?.email?.split('@')[0]}</span>
                                        <svg className="-mr-1 ml-1 h-5 w-5 hidden sm:inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path></svg>
                                    </Menu.Button>
                                </div>
                                <Transition
                                    as={Fragment}
                                    enter="transition ease-out duration-100"
                                    enterFrom="transform opacity-0 scale-95"
                                    enterTo="transform opacity-100 scale-100"
                                    leave="transition ease-in duration-75"
                                    leaveFrom="transform opacity-100 scale-100"
                                    leaveTo="transform opacity-0 scale-95"
                                >
                                    <Menu.Items className="absolute right-0 mt-2 w-56 origin-top-right rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-50
                                                        bg-[var(--color-card-background)] border border-[var(--color-border)] divide-y divide-[var(--color-border)]">
                                        <div className="px-1 py-1 ">
                                             <div className="px-3 py-2">
                                                <p className="text-xs text-[var(--color-text-secondary)]">Signed in as</p>
                                                <p className="text-sm font-medium text-[var(--color-text-primary)] truncate">{user?.email}</p>
                                                <p className="text-xs text-[var(--color-text-secondary)] capitalize">Role: {user?.role}</p>
                                            </div>
                                        </div>
                                        <div className="px-1 py-1">
                                            <Menu.Item>
                                                {({ active }) => (
                                                    <Link
                                                        to="/profile"
                                                        className={`group flex w-full items-center rounded-md px-2 py-2 text-sm 
                                                                    ${active ? 'bg-[var(--color-link)] text-white dark:text-[var(--color-button-primary-text)] body-theme-high-contrast:text-[var(--color-hc-background)]' : 'text-[var(--color-text-primary)]'}`}
                                                    >
                                                        Update Profile
                                                    </Link>
                                                )}
                                            </Menu.Item>
                                        </div>
                                        <div className="px-1 py-1">
                                            <Menu.Item>
                                                {({ active }) => (
                                                    <button
                                                        onClick={handleLogout}
                                                        className={`group flex w-full items-center rounded-md px-2 py-2 text-sm
                                                                    ${active ? 'bg-[var(--color-link)] text-white dark:text-[var(--color-button-primary-text)] body-theme-high-contrast:text-[var(--color-hc-background)]' : 'text-[var(--color-text-primary)]'}`}
                                                    >
                                                        Logout
                                                    </button>
                                                )}
                                            </Menu.Item>
                                        </div>
                                    </Menu.Items>
                                </Transition>
                            </Menu>
                        </>
                    ) : (
                        <>
                            <Link to="/login" className={navLinkClass}>Login</Link>
                            <Link to="/signup" className={navButtonClass}>
                                Sign Up
                            </Link>
                        </>
                    )}
                </div>
            </div>
        </nav>
    );
};

export default Navbar;

===== File: /src/components/common/ProtectedRoute.jsx =====
// src/components/common/ProtectedRoute.jsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    // Optional: Add a loading spinner component here
    return <div>Loading authentication...</div>;
  }

  if (!isAuthenticated) {
    // Redirect them to the /login page, but save the current location they were
    // trying to go to when they were redirected. This allows us to send them
    // along to that page after they login, which is a nicer user experience
    // than dropping them off on the home page.
    return <Navigate to="/login" replace />;
  }

  // If authenticated, render the child components (or Outlet for nested routes)
  return children ? children : <Outlet />;
};

export default ProtectedRoute;

===== File: /src/components/common/SimpleMermaidTest copy.jsx =====
import React, { useEffect, useRef, useState } from 'react';
import mermaid from 'mermaid';

const MermaidDiagram = () => {
    const [input, setInput] = useState('graph TD; A-->B');
    const outputRef = useRef(null);

    useEffect(() => {
        // Initialize Mermaid
        mermaid.initialize({ startOnLoad: true });

        // Optional: Ensure Mermaid is loaded, you might want to dynamically load the library
        // and only execute this effect once the library is confirmed to be loaded.
    }, []);

    async function renderDiagram() {
        if (outputRef.current && input) {
            try {
                const { svg } = await mermaid.render("theGraph", input);
                outputRef.current.innerHTML = svg;
            } catch (error) {
                outputRef.current.innerHTML = "Invalid syntax";
            }
        }
    }

    useEffect(() => {
        renderDiagram();
    }, [input]);

    return (
        <div>
            <textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                style={{ width: '100%', minHeight: '100px' }}
            />
            <div ref={outputRef} />
        </div>
    );
};

export default MermaidDiagram;

===== File: /src/components/common/SimpleMermaidTest.jsx =====
import React, { useEffect, useRef, useState } from 'react';
import mermaid from 'mermaid';

const MermaidDiagram = () => {
    const [input, setInput] = useState('graph TD; A-->B');
    const outputRef = useRef(null);

    useEffect(() => {
        // Initialize Mermaid
        mermaid.initialize({ startOnLoad: true });

        // Optional: Ensure Mermaid is loaded, you might want to dynamically load the library
        // and only execute this effect once the library is confirmed to be loaded.
    }, []);

    async function renderDiagram() {
        if (outputRef.current && input) {
            try {
                const { svg } = await mermaid.render("theGraph", input);
                outputRef.current.innerHTML = svg;
            } catch (error) {
                outputRef.current.innerHTML = "Invalid syntax";
            }
        }
    }

    useEffect(() => {
        renderDiagram();
    }, [input]);

    return (
        <div>
            <textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                style={{ width: '100%', minHeight: '100px' }}
            />
            <div ref={outputRef} />
        </div>
    );
};

export default MermaidDiagram;

===== File: /src/components/dashboard/ContinueLearning.jsx =====
// src/components/dashboard/ContinueLearning.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const LoadingItem = () => (
    <div className="p-3 border border-[var(--color-border)] rounded-md animate-pulse">
        <div className="h-4 bg-gray-300 dark:bg-slate-700 rounded w-3/4 mb-2"></div>
        <div className="h-3 bg-gray-200 dark:bg-slate-600 rounded w-1/2"></div>
    </div>
);

const ContinueLearning = ({ activities, loading, error }) => {
  return (
    <div className="card">
      <h2 className="text-xl font-semibold mb-3">Continue Learning</h2>
      {loading && (
        <div className="space-y-2">
            <LoadingItem /><LoadingItem />
        </div>
      )}
      {error && <p className="text-sm text-red-500">{error}</p>}
      {!loading && !error && activities.length === 0 && (
        <p className="text-sm text-[var(--color-text-secondary)] text-center py-3">
          No recent activity. Start exploring topics!
        </p>
      )}
      {!loading && !error && activities.length > 0 && (
        <ul className="space-y-2 max-h-72 overflow-y-auto custom-scrollbar">
          {activities.map(activity => (
            activity.contentId ? (
              <li key={activity._id || activity.contentId._id}>
                <Link
                  to={`/content/${activity.contentId.topic}`}
                  className="block p-3 border border-[var(--color-border)] rounded-md hover:bg-primary/5 dark:hover:bg-primary-light/5 transition-colors"
                >
                  <h3 className="text-base font-medium capitalize text-[var(--color-text-primary)]">
                    {activity.contentId.topic.replace(/-/g, ' ')}
                  </h3>
                  <p className="text-xs text-[var(--color-text-secondary)]">
                    Last accessed: {new Date(activity.lastAccessed).toLocaleDateString()}
                    {activity.status === 'completed' && <span className="ml-2 px-1.5 py-0.5 text-xs bg-green-100 text-green-700 dark:bg-green-700 dark:text-green-100 rounded-full">Completed</span>}
                  </p>
                </Link>
              </li>
            ) : null
          ))}
        </ul>
      )}
    </div>
  );
};

export default ContinueLearning;

===== File: /src/components/dashboard/PredictiveSuggestions.jsx =====
// src/components/dashboard/PredictiveSuggestions.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const PredictiveSuggestions = ({ userPreferences, recentActivity }) => {
  let suggestions = [];

  // Rule 1: If user prefers a certain mode, and has recent activity, suggest trying that mode.
  if (userPreferences?.preferredContentMode && recentActivity?.length > 0) {
    const mode = userPreferences.preferredContentMode;
    suggestions.push({
      id: 'pref-mode-1',
      text: `You prefer '${mode}' mode. Try exploring new topics with it!`,
      link: '/dashboard', // Link to explore topics page or similar
      linkText: 'Explore Topics'
    });
  }

  // Rule 2: If user has a reading level set, suggest simplifying content.
  if (userPreferences?.readingLevel && userPreferences.readingLevel !== 'advanced') {
    suggestions.push({
      id: 'reading-level-1',
      text: `Remember, you can simplify content to a '${userPreferences.readingLevel}' level for easier understanding.`,
      link: null
    });
  }
  
  // Rule 3: If user uses visual map for one topic, suggest for another if available (pseudo)
  const hasUsedVisual = recentActivity?.some(act => act.modesUsedFrequency?.find(m => m.mode.includes('visual')));
  if (hasUsedVisual) {
      suggestions.push({
          id: 'visual-map-1',
          text: "Visual maps can be helpful! Try generating one for a complex topic.",
          link: null
      });
  }


  if (suggestions.length === 0) {
    suggestions.push({
        id: 'default-sugg-1',
        text: "Explore topics and update your preferences to get personalized suggestions!",
        link: '/profile',
        linkText: 'Update Preferences'
    })
  }
  
  // Limit suggestions shown
  suggestions = suggestions.slice(0, 2);


  return (
    <div className="card">
      <h2 className="text-xl font-semibold mb-3">Tips & Suggestions</h2>
      {suggestions.length === 0 && (
        <p className="text-sm text-[var(--color-text-secondary)]">No suggestions right now. Keep learning!</p>
      )}
      <ul className="space-y-3">
        {suggestions.map(suggestion => (
          <li key={suggestion.id} className="p-3 border border-dashed border-[var(--color-border)] rounded-md bg-primary/5 dark:bg-primary-light/5">
            <p className="text-sm text-[var(--color-text-primary)]">{suggestion.text}</p>
            {suggestion.link && (
              <Link to={suggestion.link} className="text-xs text-[var(--color-link)] hover:underline mt-1 inline-block">
                {suggestion.linkText || 'Learn More'}
              </Link>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default PredictiveSuggestions;

===== File: /src/components/dashboard/UserTasks.jsx =====
// src/components/dashboard/UserTasks.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { getUserTasksApi, createTaskApi, updateTaskApi, deleteTaskApi } from '../../services/taskService';
import { toast } from 'react-toastify';
import { Link } from 'react-router-dom'; // For linking tasks to content

const LoadingSpinner = () => <div className="text-xs text-center p-2">Loading tasks...</div>;
const ErrorMessage = ({ msg }) => <p className="text-xs text-red-500 p-1">{msg}</p>;

const TaskItem = ({ task, onToggleComplete, onDelete, onEdit }) => (
    <li className={`flex items-center justify-between p-2.5 border-b border-[var(--color-border)] last:border-b-0 ${task.completed ? 'opacity-60' : ''}`}>
        <div className="flex items-center">
            <input
                type="checkbox"
                className="form-checkbox-default mr-3"
                checked={task.completed}
                onChange={() => onToggleComplete(task._id, !task.completed)}
                aria-labelledby={`task-title-${task._id}`}
            />
            <div>
                <span id={`task-title-${task._id}`} className={`text-sm ${task.completed ? 'line-through text-[var(--color-text-secondary)]' : 'text-[var(--color-text-primary)]'}`}>
                    {task.title}
                </span>
                {task.relatedContentTopic && (
                    <Link to={`/content/${task.relatedContentTopic}`} className="ml-1 text-xs text-[var(--color-link)] hover:underline">(Topic)</Link>
                )}
                {task.dueDate && (
                    <p className="text-xs text-[var(--color-text-secondary)]">
                        Due: {new Date(task.dueDate).toLocaleDateString()}
                    </p>
                )}
            </div>
        </div>
        <div className="space-x-2">
            <button onClick={() => onEdit(task)} className="text-xs text-blue-500 hover:underline">Edit</button>
            <button onClick={() => onDelete(task._id)} className="text-xs text-red-500 hover:underline">Del</button>
        </div>
    </li>
);


const UserTasks = () => {
  const [tasks, setTasks] = useState([]);
  const [newTaskTitle, setNewTaskTitle] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showInput, setShowInput] = useState(false);
  // const [editingTask, setEditingTask] = useState(null); // For a modal edit later

  const { user } = useAuth();

  const fetchTasks = useCallback(async () => {
    if (!user) return;
    setLoading(true); setError(null);
    try {
      const userTasks = await getUserTasksApi({ sortBy: 'completed:asc,dueDate:asc,createdAt:desc' });
      setTasks(userTasks);
    } catch (err) {
      setError('Failed to load tasks.');
      toast.error('Failed to load tasks.');
    } finally {
      setLoading(false);
    }
  }, [user]);

  useEffect(() => {
    fetchTasks();
  }, [fetchTasks]);

  const handleAddTask = async (e) => {
    e.preventDefault();
    if (!newTaskTitle.trim()) return;
    try {
      const createdTask = await createTaskApi({ title: newTaskTitle });
      setTasks(prevTasks => [createdTask, ...prevTasks.sort((a,b) => a.completed - b.completed)]); // Add to top, keep completed at bottom
      setNewTaskTitle('');
      setShowInput(false);
      toast.success('Task added!');
    } catch (err) {
      toast.error('Failed to add task.');
    }
  };

  const handleToggleComplete = async (taskId, completed) => {
    try {
      const updatedTask = await updateTaskApi(taskId, { completed });
      setTasks(prevTasks =>
        prevTasks.map(t => (t._id === taskId ? updatedTask : t)).sort((a,b) => a.completed - b.completed)
      );
      toast.info(`Task marked as ${completed ? 'complete' : 'incomplete'}.`);
    } catch (err) {
      toast.error('Failed to update task status.');
    }
  };

  const handleDeleteTask = async (taskId) => {
    if (!window.confirm("Delete this task?")) return;
    try {
      await deleteTaskApi(taskId);
      setTasks(prevTasks => prevTasks.filter(t => t._id !== taskId));
      toast.success('Task deleted.');
    } catch (err) {
      toast.error('Failed to delete task.');
    }
  };

  const handleEditTask = (task) => {
    // For now, prompt. Later, a modal.
    const newTitle = prompt("Edit task title:", task.title);
    if (newTitle && newTitle.trim() !== task.title) {
        updateTaskApi(task._id, { title: newTitle.trim() })
            .then(updated => {
                setTasks(prev => prev.map(t => t._id === updated._id ? updated : t));
                toast.success("Task title updated.");
            })
            .catch(() => toast.error("Failed to update task title."));
    }
  }

  return (
    <div className="card">
      <h2 className="text-xl font-semibold mb-3">My Tasks</h2>
      {loading && <LoadingSpinner />}
      {error && <ErrorMessage msg={error} />}
      {!loading && !error && (
        <>
          {tasks.length === 0 && !showInput && (
            <p className="text-sm text-center text-[var(--color-text-secondary)] py-3">No tasks yet. Add one!</p>
          )}
          <ul className="mb-3 max-h-60 overflow-y-auto custom-scrollbar divide-y divide-[var(--color-border)]">
            {tasks.map(task => (
              <TaskItem
                key={task._id}
                task={task}
                onToggleComplete={handleToggleComplete}
                onDelete={handleDeleteTask}
                onEdit={handleEditTask}
              />
            ))}
          </ul>
          {showInput ? (
            <form onSubmit={handleAddTask} className="flex gap-2">
              <input
                type="text"
                value={newTaskTitle}
                onChange={(e) => setNewTaskTitle(e.target.value)}
                placeholder="Enter new task title..."
                className="form-input-default flex-grow text-sm"
                autoFocus
              />
              <button type="submit" className="button-primary text-sm !py-1.5">Add</button>
              <button type="button" onClick={() => setShowInput(false)} className="button-secondary text-sm !py-1.5">Cancel</button>
            </form>
          ) : (
             <button onClick={() => setShowInput(true)} className="button-secondary text-sm w-full mt-2">
                + Add New Task
            </button>
          )}
        </>
      )}
    </div>
  );
};

export default UserTasks;

===== File: /src/contexts/AuthContext.jsx =====
// src/contexts/AuthContext.jsx (Unified)
import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';
import {
  loginUser as apiLoginUser,
  signupUser as apiSignupUser,
  getUserProfile as apiGetUserProfile,
  updateUserPreferences as apiUpdateUserPreferences,
  logoutUser as apiLogoutUser // This one just clears localStorage in authService
} from '../services/authService';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null); // Will hold the FULL user object
  const [token, setToken] = useState(localStorage.getItem('authToken') || null);
  const [loading, setLoading] = useState(true); // For initial load, login, signup, etc.
  const [error, setError] = useState(null);

  // Effect to load user on initial mount if token exists
  useEffect(() => {
    const loadUserOnMount = async () => {
      const storedToken = localStorage.getItem('authToken');
      if (storedToken) {
        setToken(storedToken); // Make sure token state is set
        setLoading(true);
        try {
          const userData = await apiGetUserProfile(); // Fetches full user data with preferences
          setUser(userData);
          setError(null);
        } catch (err) {
          console.error("AuthContext: Failed to fetch user profile on mount", err);
          // If token is invalid (e.g., 401 error), logout
          if (err.response && err.response.status === 401) {
            localStorage.removeItem('authToken');
            localStorage.removeItem('authUser'); // If you were storing this
            setToken(null);
            setUser(null);
          }
          setError(err.response?.data?.error || 'Failed to load user data.');
        } finally {
          setLoading(false);
        }
      } else {
        setLoading(false); // No token, not loading user
      }
    };
    loadUserOnMount();
  }, []); // Empty dependency array: run once on mount

  const login = async (credentials) => {
    setLoading(true);
    setError(null);
    try {
      const data = await apiLoginUser(credentials); // API returns { _id, name, email, preferences, token }
      localStorage.setItem('authToken', data.token);
      // No need to store 'authUser' separately in localStorage if `user` state has it all
      localStorage.removeItem('authUser'); // Clean up old storage if any
      setToken(data.token);
      setUser({ // Set the full user object
        _id: data._id,
        name: data.name,
        email: data.email,
        role: data.role,
        preferences: data.preferences,
        createdAt: data.createdAt // If backend sends it
      });
      setLoading(false);
      return true;
    } catch (err) {
      console.error("AuthContext: Login failed", err);
      setError(err.response?.data?.error || 'Login failed');
      setLoading(false);
      return false;
    }
  };

  const signup = async (userData) => {
    setLoading(true);
    setError(null);
    try {
      const data = await apiSignupUser(userData); // API returns { _id, name, email, preferences, token }
      localStorage.setItem('authToken', data.token);
      localStorage.removeItem('authUser'); // Clean up old storage if any
      setToken(data.token);
      setUser({ // Set the full user object
        _id: data._id,
        name: data.name,
        email: data.email,
        role: data.role,
        preferences: data.preferences,
        createdAt: data.createdAt // If backend sends it
      });
      setLoading(false);
      return true;
    } catch (err) {
      console.error("AuthContext: Signup failed", err);
      setError(err.response?.data?.error || 'Signup failed');
      setLoading(false);
      return false;
    }
  };

  const logout = () => {
    apiLogoutUser(); // This function in authService clears localStorage
    setToken(null);
    setUser(null);
    setError(null);
    // No need to interact with `api.defaults.headers.common['Authorization']`
    // as the interceptor in `services/api.js` handles token presence.
  };

  const updateUserPreferences = async (preferencesData) => {
    if (!user) {
      const err = new Error("User not logged in to update preferences");
      setError(err.message);
      throw err;
    }
    setLoading(true); // Can use a more specific loading state if preferred for UX
    setError(null);
    try {
      const { preferences: updatedPreferences } = await apiUpdateUserPreferences(preferencesData);
      setUser(prevUser => ({ ...prevUser, preferences: updatedPreferences }));
      setLoading(false);
      return updatedPreferences;
    } catch (err) {
      console.error("AuthContext: Failed to update preferences", err);
      setError(err.response?.data?.error || 'Failed to update preferences.');
      setLoading(false);
      throw err;
    }
  };

  const isAuthenticated = !!token && !!user;

  return (
    <AuthContext.Provider value={{
      user,
      token,
      isAuthenticated,
      loading,
      error,
      login,
      signup,
      logout,
      updateUserPreferences,
      setError // Good to expose setError to clear it manually if needed
    }}>
      {children}
    </AuthContext.Provider>
  );
};

// Custom Hook for easy access
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

===== File: /src/index.js =====
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { AuthProvider } from './contexts/AuthContext'; // Only this provider
import { BrowserRouter } from 'react-router-dom';
import './index.css'; // Assuming you have a global CSS file

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <App />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);

===== File: /src/pages/ContentPage.jsx =====
// ===== File: /src/pages/ContentPage.jsx =====
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import {
  getContentByTopic,
  simplifyContent,
  generateVisualMap,
  // generateAudioNarration // Still placeholder-like based on backend
} from '../services/contentService';
import { logContentInteractionApi } from '../services/taskService';
import { askQuestionApi } from '../services/qaService'; // For Q&A
import MermaidDiagram from '../components/common/MermaidDiagram';
import { toast } from 'react-toastify';

// --- Inlined Placeholder Components ---
const LoadingSpinner = ({ text = "Loading..." }) => (
  <div className="text-center p-10">
    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[var(--color-link)] mx-auto mb-2"></div>
    <p className="text-[var(--color-text-secondary)]">{text}</p>
  </div>
);
const ErrorMessageDisplay = ({ message }) => ( // Renamed to avoid conflict
  <div
    className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 my-4 rounded
               dark:bg-red-900/30 dark:border-red-600 dark:text-red-300
               body-theme-high-contrast:bg-hc-background body-theme-high-contrast:border-hc-link body-theme-high-contrast:text-hc-link"
    role="alert"
  >
    <p className="font-bold">Error</p>
    <p>{message}</p>
  </div>
);
const InfoMessageDisplay = ({ message }) => ( // Renamed
  <div
    className="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 my-4 rounded
               dark:bg-blue-900/30 dark:border-blue-600 dark:text-blue-300
               body-theme-high-contrast:bg-hc-background body-theme-high-contrast:border-hc-link body-theme-high-contrast:text-hc-link"
    role="alert"
  >
    <p>{message}</p>
  </div>
);

// Granular simplification levels for UI
const SIMPLIFICATION_LEVELS = [
    { value: 'eli5', label: 'ELI5 (Simplest)' },
    { value: 'easy', label: 'Easy' },
    { value: 'moderate', label: 'Moderate' },
    { value: 'high_school', label: 'High School' },
    { value: 'college_intro', label: 'College Intro' },
    // { value: 'advanced', label: 'Advanced' }, // Can add if needed
];

// Map user preference reading levels to one of the granular cache keys
const mapUserPrefToCacheKey = (prefLevel) => {
    switch (prefLevel) {
        case 'basic': return 'easy';
        case 'intermediate': return 'moderate';
        case 'advanced': return 'advanced'; // Or map to 'college_intro' if 'advanced' isn't a direct AI target
        default: return 'easy';
    }
};


const ContentPage = () => {
  const { topic: topicSlug } = useParams();
  const { user, isAuthenticated } = useAuth();
  const navigate = useNavigate();
  const userPrefs = user?.preferences;

  const [contentAndProgress, setContentAndProgress] = useState(null); // Stores { ...content, learningProgress }
  const [currentMode, setCurrentMode] = useState('original');
  const [displayedText, setDisplayedText] = useState('');
  const [visualMapData, setVisualMapData] = useState(null);
  const [audioUrl, setAudioUrl] = useState(null);

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isProcessingMode, setIsProcessingMode] = useState(false);
  const [selectedSimplificationLevel, setSelectedSimplificationLevel] = useState('');

  const interactionStartTimeRef = useRef(null);
  const currentContentIdRef = useRef(null);
  const currentModeRef = useRef('original'); // Ref to hold currentMode for reliable logging on unmount

  const [qaQuestion, setQaQuestion] = useState('');
  const [qaAnswer, setQaAnswer] = useState('');
  const [qaLoading, setQaLoading] = useState(false);
  const [qaError, setQaError] = useState('');


  const logInteraction = useCallback(async (eventType, modeOverride = null, explicitDurationMs = null) => {
    if (!isAuthenticated || !currentContentIdRef.current) return;

    const modeToLog = modeOverride || currentModeRef.current;
    let durationMs = explicitDurationMs;

    if (eventType === 'end' && interactionStartTimeRef.current && explicitDurationMs === null) {
        durationMs = Date.now() - interactionStartTimeRef.current;
    }

    if (eventType === 'end' && (durationMs === null || durationMs < 1500) && explicitDurationMs === null) {
        interactionStartTimeRef.current = null;
        return; // Skip logging very short interactions
    }

    try {
      await logContentInteractionApi({
        contentId: currentContentIdRef.current,
        mode: modeToLog,
        eventType,
        durationMs: eventType === 'end' ? durationMs : undefined,
      });
      if (eventType === 'start') {
        interactionStartTimeRef.current = Date.now();
      } else if (eventType === 'end') {
        interactionStartTimeRef.current = null;
      }
    } catch (loggingError) {
      console.warn('Failed to log content interaction:', loggingError.message);
    }
  }, [isAuthenticated]);

  const fetchContentData = useCallback(async () => {
    if (!topicSlug) return;
    setLoading(true);
    setError(null); setContentAndProgress(null); setDisplayedText(''); setVisualMapData(null); setAudioUrl(null);
    setCurrentMode('original'); currentModeRef.current = 'original';
    setSelectedSimplificationLevel(mapUserPrefToCacheKey(userPrefs?.readingLevel || 'easy'));

    try {
      const data = await getContentByTopic(topicSlug);
      setContentAndProgress(data);
      currentContentIdRef.current = data._id;
      setDisplayedText(data.originalText);

      let initialMode = userPrefs?.preferredContentMode || 'original';
      if (initialMode === 'simplified' && data.defaultSimplifiedText) {
          setSelectedSimplificationLevel(data.defaultSimplifiedLevel || mapUserPrefToCacheKey(userPrefs?.readingLevel || 'easy'));
          setDisplayedText(data.defaultSimplifiedText);
          setCurrentMode('simplified'); currentModeRef.current = 'simplified';
      } else if (initialMode === 'visual' && data.visualMaps?.length > 0) {
          setVisualMapData(data.visualMaps.find(m => m.format === 'mermaid') || data.visualMaps[0]);
          setCurrentMode('visual'); currentModeRef.current = 'visual';
      } else if (initialMode === 'audio' && data.audioNarrations?.length > 0) {
          setAudioUrl(data.audioNarrations[0].url);
          setCurrentMode('audio'); currentModeRef.current = 'audio';
      } else {
          setCurrentMode('original'); currentModeRef.current = 'original';
      }
      logInteraction('start', currentModeRef.current);
    } catch (err) {
      const errMsg = err.response?.data?.message || `Content for "${topicSlug}" not found or failed to load.`;
      setError(errMsg);
      toast.error(errMsg);
      if(err.response?.status === 404) navigate('/dashboard'); // Or a 404 page
    } finally {
      setLoading(false);
    }
  }, [topicSlug, userPrefs, logInteraction, navigate]);

  useEffect(() => {
    fetchContentData();
    return () => {
      logInteraction('end');
      currentContentIdRef.current = null;
    };
  }, [fetchContentData]); // fetchContentData includes logInteraction


  const handleModeChange = useCallback(async (newMode, params = {}) => {
    if (!contentAndProgress) return;
    setError(null);

    const previousModeDuration = interactionStartTimeRef.current ? Date.now() - interactionStartTimeRef.current : null;
    await logInteraction('end', currentModeRef.current, previousModeDuration);

    setCurrentMode(newMode); currentModeRef.current = newMode;
    setIsProcessingMode(true);
    if (newMode !== 'visual') setVisualMapData(null);
    if (newMode !== 'audio') setAudioUrl(null);

    await logInteraction('start', newMode);

    try {
      if (newMode === 'original') {
        setDisplayedText(contentAndProgress.originalText);
      } else if (newMode === 'simplified') {
        const levelToSimplify = params.level || selectedSimplificationLevel || mapUserPrefToCacheKey(userPrefs?.readingLevel || 'easy');
        setSelectedSimplificationLevel(levelToSimplify);

        const cachedVersion = contentAndProgress.simplifiedVersions?.find(v => v.level === levelToSimplify);
        if (cachedVersion) {
          setDisplayedText(cachedVersion.text);
        } else {
          toast.info(`Generating ${levelToSimplify} simplification...`);
          const simplifiedResult = await simplifyContent(contentAndProgress.topic, levelToSimplify);
          setDisplayedText(simplifiedResult.simplifiedText);
          setContentAndProgress(prev => ({
            ...prev,
            simplifiedVersions: [...(prev.simplifiedVersions || []), { level: simplifiedResult.level, text: simplifiedResult.simplifiedText, createdAt: new Date() }]
          }));
        }
      } else if (newMode === 'visual') {
        setDisplayedText('');
        const format = 'mermaid';
        const cachedMap = contentAndProgress.visualMaps?.find(v => v.format === format);
        if (cachedMap) {
          setVisualMapData(cachedMap);
        } else {
          toast.info("Generating visual map...");
          const mapResult = await generateVisualMap(contentAndProgress.topic, format);
          setVisualMapData(mapResult.visualMap);
          setContentAndProgress(prev => ({ ...prev, visualMaps: [...(prev.visualMaps || []), mapResult.visualMap] }));
        }
      } else if (newMode === 'audio') {
         setDisplayedText('');
         if (contentAndProgress.audioNarrations && contentAndProgress.audioNarrations.length > 0) {
            setAudioUrl(contentAndProgress.audioNarrations[0].url); // Use first available
         } else {
            toast.warn("No pre-generated audio. Manual or AI generation can be added via edit page or AI features.");
            // Placeholder for future on-demand AI audio generation
            // const textForAudio = displayedText || contentAndProgress.originalText;
            // const narrationData = await generateAudioNarration(contentAndProgress._id, textForAudio);
            // setAudioUrl(narrationData.narration.url);
            // setContentAndProgress(prev => ({...prev, audioNarrations: [...(prev.audioNarrations || []), narrationData.narration]}));
         }
      }
    } catch (err) {
      const errorMsg = err.response?.data?.error || `Failed to generate ${newMode} content.`;
      setError(errorMsg); toast.error(errorMsg);
    } finally {
      setIsProcessingMode(false);
    }
  }, [contentAndProgress, userPrefs, selectedSimplificationLevel, logInteraction]);

  const handleQaSubmit = async (e) => {
    e.preventDefault();
    if (!qaQuestion.trim() || !contentAndProgress) return;
    setQaLoading(true); setQaError(''); setQaAnswer('');
    try {
        const result = await askQuestionApi(qaQuestion, contentAndProgress.topic, contentAndProgress._id);
        setQaAnswer(result.answer);
    } catch (err) {
        const errorMsg = err.response?.data?.error || "Failed to get an answer.";
        setQaError(errorMsg);
        toast.error(errorMsg);
    } finally {
        setQaLoading(false);
        setQaQuestion(''); // Clear input after submission
    }
  };


  const getProseClass = () => userPrefs?.theme === 'high-contrast' ? 'prose-high-contrast' : '';
  const getButtonClass = (modeNameIsCurrent) => {
    let base = "px-3 py-1.5 rounded text-sm font-medium transition-colors disabled:opacity-60 disabled:cursor-not-allowed ";
    if (modeNameIsCurrent) {
        if (userPrefs?.theme === 'high-contrast') return base + "bg-hc-interactive text-hc-interactive-text";
        return base + "bg-primary text-white dark:bg-primary-light dark:text-slate-900 shadow-md";
    } else {
        if (userPrefs?.theme === 'high-contrast') return base + "bg-hc-background text-hc-text border border-hc-border hover:bg-gray-800";
        return base + "bg-gray-200 hover:bg-gray-300 text-gray-700 dark:bg-slate-700 dark:hover:bg-slate-600 dark:text-slate-200";
    }
  };

  const imageUrlsToDisplay = contentAndProgress?.media?.imageUrls || [];
  const showImagesPreference = userPrefs?.showContentImages !== undefined ? userPrefs.showContentImages : true;
  const imageLayoutPreference = userPrefs?.imageLayout || 'stacked';

  if (loading && !contentAndProgress) return <LoadingSpinner text={`Loading ${topicSlug.replace(/-/g, ' ')}...`} />;

  return (
    <div className="container mx-auto p-4 md:p-6">
      <div className="mb-4">
        <Link to="/dashboard" className="text-sm text-[var(--color-link)] hover:underline">â Back to Dashboard</Link>
      </div>

      {error && <ErrorMessageDisplay message={error} />}
      {!contentAndProgress && !loading && !error && <InfoMessageDisplay message={`No content found for "${topicSlug}".`} />}

      {contentAndProgress && (
        <div className="space-y-8">
          <h1 className="capitalize">{contentAndProgress.topic.replace(/-/g, ' ')}</h1>

          <div className="mb-8">
            <div className="mb-6 border-b pb-3 flex flex-wrap gap-2 items-center border-[var(--color-border)]">
              {['original', 'simplified', 'visual', 'audio'].map((modeName) => (
                <button
                  key={modeName}
                  onClick={() => handleModeChange(modeName)}
                  disabled={isProcessingMode && currentMode !== modeName}
                  className={getButtonClass(currentMode === modeName)}
                >
                  {isProcessingMode && currentMode === modeName ? `Loading...` : modeName.charAt(0).toUpperCase() + modeName.slice(1)}
                </button>
              ))}
              {currentMode === 'simplified' && (
                <select
                  value={selectedSimplificationLevel}
                  onChange={(e) => handleModeChange('simplified', { level: e.target.value })}
                  disabled={isProcessingMode}
                  className="form-input-default ml-2 px-2 py-1.5 text-sm !w-auto"
                  aria-label="Select simplification level"
                >
                  {SIMPLIFICATION_LEVELS.map(opt => (
                    <option key={opt.value} value={opt.value}>{opt.label}</option>
                  ))}
                </select>
              )}
            </div>

            <article
              className={`prose prose-sm sm:prose lg:prose-lg xl:prose-xl max-w-none
                          p-4 md:p-6 border rounded shadow-sm
                          bg-[var(--color-card-background)] border-[var(--color-border)]
                          dark:prose-invert ${getProseClass()}`}
            >
              {(currentMode === 'original' || currentMode === 'simplified') && (
                   isProcessingMode && !displayedText ? <LoadingSpinner text={currentMode === 'original' ? 'Loading...' : 'Simplifying...'} /> :
                   displayedText ? <div dangerouslySetInnerHTML={{ __html: displayedText.replace(/\n{2,}/g, '</p><p>').replace(/\n/g, '<br />') }} /> : // Basic paragraph/br handling
                   !isProcessingMode && <InfoMessageDisplay message="No text content available for this mode." />
              )}
              {currentMode === 'visual' && (
                   isProcessingMode && !visualMapData ? <LoadingSpinner text="Generating visual map..." /> :
                   visualMapData && visualMapData.data && visualMapData.format === 'mermaid' ? (
                       <MermaidDiagram chartData={visualMapData.data} diagramId={`content-map-${contentAndProgress._id}-${Date.now()}`} />
                   ) :
                   visualMapData && visualMapData.data && visualMapData.format !== 'mermaid' ? (
                        <pre className="whitespace-pre-wrap break-words">{visualMapData.data}</pre>
                   ) :
                   !isProcessingMode && <InfoMessageDisplay message="No visual map available or format not supported." />
              )}
              {currentMode === 'audio' && (
                   isProcessingMode && !audioUrl ? <LoadingSpinner text="Loading audio..." /> :
                   audioUrl ? <audio controls src={audioUrl} className="w-full my-2 body-theme-high-contrast:[color-scheme:dark]">Your browser does not support audio.</audio> :
                   !isProcessingMode && <InfoMessageDisplay message="No audio available for this content." />
              )}
            </article>
          </div>

          {showImagesPreference && imageUrlsToDisplay && imageUrlsToDisplay.length > 0 && (
            <section className="my-8 py-6 border-t border-b border-[var(--color-border)]" aria-labelledby="illustrations-heading">
              <h2 id="illustrations-heading" className="text-xl font-semibold mb-6 text-center text-[var(--color-text-secondary)]">
                Illustrations / Visual Aids
              </h2>
              <div className={`${imageLayoutPreference === 'grid' ? 'grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6' : 'space-y-6 max-w-2xl mx-auto'}`}>
                {imageUrlsToDisplay.map((url, index) => (
                  url && typeof url === 'string' && url.trim() !== '' ? (
                    <figure key={`content-image-${index}-${url.slice(-10)}`} className="bg-[var(--color-card-background)] rounded-lg overflow-hidden shadow-lg border border-[var(--color-border)] group">
                      <img src={url} alt={`${contentAndProgress.topic.replace(/-/g, ' ')} illustration ${index + 1}`}
                           className={`w-full block mx-auto transition-transform duration-300 group-hover:scale-105
                                       ${imageLayoutPreference === 'grid' ? 'h-full object-cover aspect-[16/10]' : 'h-auto max-h-[60vh] object-contain'}`}
                           loading="lazy"
                           onError={(e) => { e.target.style.display = 'none'; if(e.target.parentElement) { const errP = document.createElement('p'); errP.className = 'text-xs text-red-500 p-4 text-center'; errP.textContent = 'Image failed to load'; e.target.parentElement.appendChild(errP); }}} />
                    </figure>
                  ) : null
                ))}
              </div>
            </section>
          )}

          {isAuthenticated && (
            <div className="mt-10 card">
                <h3 className="text-xl font-semibold mb-4">Interactive Companion (AI Tutor)</h3>
                <form onSubmit={handleQaSubmit} className="space-y-3">
                    <div>
                        <label htmlFor="qa-question" className="form-label-default">Ask a question about "{contentAndProgress.topic.replace(/-/g, ' ')}":</label>
                        <textarea
                            id="qa-question"
                            rows="3"
                            className="form-input-default"
                            value={qaQuestion}
                            onChange={(e) => setQaQuestion(e.target.value)}
                            placeholder="e.g., Can you explain this concept in simpler terms?"
                            required
                        />
                    </div>
                    <button type="submit" className="button-primary" disabled={qaLoading || !qaQuestion.trim()}>
                        {qaLoading ? "Thinking..." : "Ask AI Tutor"}
                    </button>
                </form>
                {qaError && <ErrorMessageDisplay message={qaError} />}
                {qaAnswer && !qaError && (
                    <div className="mt-6 p-4 border border-[var(--color-border)] rounded-md bg-[var(--color-background)] shadow">
                        <h4 className="font-semibold text-[var(--color-text-primary)] mb-2">AI Tutor's Response:</h4>
                        <div className="prose prose-sm max-w-none dark:prose-invert" dangerouslySetInnerHTML={{ __html: qaAnswer.replace(/\n/g, '<br />') }}></div>
                    </div>
                )}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ContentPage;

===== File: /src/pages/DashboardPage.jsx =====
// ===== File: /src/pages/DashboardPage.jsx =====
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Link } from 'react-router-dom';
import { getPublishedContentList } from '../services/contentService';
import { getRecentLearningActivityApi } from '../services/taskService';

// Import new components
import UserTasks from '../components/dashboard/UserTasks';
import ContinueLearning from '../components/dashboard/ContinueLearning';
import PredictiveSuggestions from '../components/dashboard/PredictiveSuggestions';

const LoadingSpinner = ({text = "Loading..."}) => (
  <div className="text-center p-10">
    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[var(--color-link)] mx-auto mb-2"></div>
    <p className="text-[var(--color-text-secondary)]">{text}</p>
  </div>
);
const ErrorMessageDisplay = ({ message }) => ( // Renamed
  <div className="text-center p-4 my-4 text-red-600 bg-red-100 dark:bg-red-900/30 dark:text-red-300 rounded border border-red-300">
    Error: {message}
  </div>
);


const DashboardPage = () => {
  const { user } = useAuth();
  const [allTopics, setAllTopics] = useState([]);
  const [loadingTopics, setLoadingTopics] = useState(true);
  const [topicError, setTopicError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');

  const [recentActivity, setRecentActivity] = useState([]);
  const [loadingRecent, setLoadingRecent] = useState(true);
  const [recentError, setRecentError] = useState(null);

  const fetchTopics = useCallback(async () => {
    setLoadingTopics(true);
    setTopicError(null);
    try {
      // Fetch more topics for better client-side filtering if needed, or implement backend pagination for this list too.
      const data = await getPublishedContentList({ limit: 100, sortBy: 'topic:asc' });
      setAllTopics(data.contents || []);
    } catch (err) {
      setTopicError(err.response?.data?.error || 'Failed to load topics.');
      console.error("Dashboard fetch topics error:", err);
    } finally {
      setLoadingTopics(false);
    }
  }, []);

  const fetchRecentActivity = useCallback(async () => {
    if (!user) {
        setLoadingRecent(false); // No user, nothing to fetch
        return;
    }
    setLoadingRecent(true);
    setRecentError(null);
    try {
      const data = await getRecentLearningActivityApi(5); // Get top 5 recent activities
      setRecentActivity(data || []);
    } catch (err) {
      setRecentError(err.response?.data?.error || 'Failed to load recent activity.');
      console.error("Dashboard fetch recent activity error:", err);
    } finally {
      setLoadingRecent(false);
    }
  }, [user]);

  useEffect(() => {
    fetchTopics();
    if(user) { // Only fetch recent activity if user is logged in
        fetchRecentActivity();
    }
  }, [fetchTopics, fetchRecentActivity, user]);

  const filteredTopics = useMemo(() => {
    if (!searchTerm.trim()) return allTopics;
    const lowerSearchTerm = searchTerm.toLowerCase().trim();
    return allTopics.filter(content =>
      content.topic.toLowerCase().replace(/-/g, ' ').includes(lowerSearchTerm) ||
      (content.tags && content.tags.some(tag => tag.toLowerCase().includes(lowerSearchTerm))) ||
      (content.originalText && content.originalText.toLowerCase().substring(0, 200).includes(lowerSearchTerm)) // Search smaller snippet
    );
  }, [allTopics, searchTerm]);

  return (
    <div className="space-y-8">
      <div>
        <h1>Dashboard</h1>
        <p className="text-lg text-[var(--color-text-secondary)]">
          Welcome back, {user?.name || user?.email?.split('@')[0]}!
        </p>
      </div>

      {user && ( // Only show these sections if user is logged in
        <div className="grid md:grid-cols-2 gap-6">
            <ContinueLearning
                activities={recentActivity}
                loading={loadingRecent}
                error={recentError}
            />
            <PredictiveSuggestions userPreferences={user?.preferences} recentActivity={recentActivity} allTopics={allTopics} />
        </div>
      )}

      {user && <UserTasks />}


      <div className="card">
        <h2 className="text-xl font-semibold mb-4">Explore All Topics:</h2>
        <div className="mb-6">
          <input
            type="search"
            placeholder="Search topics, tags, or keywords..."
            className="form-input-default w-full sm:w-2/3 md:w-1/2"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            aria-label="Search topics"
          />
        </div>

        {loadingTopics && <LoadingSpinner text="Loading topics..." />}
        {topicError && <ErrorMessageDisplay message={topicError} />}

        {!loadingTopics && !topicError && allTopics.length === 0 && (
            <p className="text-[var(--color-text-secondary)] text-center py-4">No topics available yet. Content creators can add more!</p>
        )}
        {!loadingTopics && !topicError && allTopics.length > 0 && filteredTopics.length === 0 && searchTerm.trim() && (
            <p className="text-[var(--color-text-secondary)] text-center py-4">No topics match your search: "{searchTerm}". Try a different keyword.</p>
        )}

        {!loadingTopics && !topicError && filteredTopics.length > 0 && (
          <ul className="space-y-3 max-h-[60vh] overflow-y-auto pr-2 custom-scrollbar">
            {filteredTopics.map(content => (
              <li key={content._id || content.topic}>
                <Link
                  to={`/content/${content.topic}`}
                  className="block p-3 rounded-md hover:bg-primary/10 dark:hover:bg-primary-light/10 body-theme-high-contrast:hover:bg-hc-link body-theme-high-contrast:hover:text-hc-background transition-colors duration-150 border border-transparent hover:border-[var(--color-border)]"
                >
                  <span className="font-medium text-base capitalize">
                    {content.topic.replace(/-/g, ' ')}
                  </span>
                  {content.originalText && (
                     <p className="text-sm text-[var(--color-text-secondary)] mt-1 line-clamp-2">
                        {content.originalText}
                     </p>
                  )}
                   {content.tags && content.tags.length > 0 && (
                    <div className="mt-1.5 space-x-1">
                        {content.tags.slice(0,3).map(tag => (
                            <span key={tag} className="text-xs bg-gray-200 dark:bg-slate-700 text-[var(--color-text-secondary)] px-1.5 py-0.5 rounded-full">{tag}</span>
                        ))}
                        {content.tags.length > 3 && <span className="text-xs text-[var(--color-text-secondary)]">+ {content.tags.length - 3} more</span>}
                    </div>
                   )}
                </Link>
              </li>
            ))}
          </ul>
        )}
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        <div className="card">
            <h3 className="text-lg font-semibold mb-3">Your Preferences</h3>
            <p className="text-sm text-[var(--color-text-secondary)] mb-4">
                Customize your learning experience to suit your needs.
            </p>
            <Link to="/profile" className="button-secondary text-sm">
                Go to Profile Settings
            </Link>
        </div>
         <div className="card opacity-70"> {/* Placeholder for now */}
            <h3 className="text-lg font-semibold mb-3">Learning Goals (Coming Soon)</h3>
            <p className="text-sm text-[var(--color-text-secondary)]">
                Track your progress and set new learning objectives.
            </p>
        </div>
      </div>
    </div>
  );
};

export default DashboardPage;

===== File: /src/pages/HomePage.jsx =====
// src/pages/HomePage.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const HomePage = () => {
  return (
    <div className="text-center py-10 md:py-20"> {/* Added padding for better centering */}
      <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold mb-6">
        Welcome to the <br className="sm:hidden" /> {/* Break line on small screens */}
        <span className="text-primary dark:text-primary-light body-theme-high-contrast:text-hc-link">
          Accessible Learning Portal
        </span>
      </h1>
      <p className="text-lg sm:text-xl text-[var(--color-text-secondary)] mb-8 max-w-2xl mx-auto">
        Your journey to personalized and inclusive learning starts here. We adapt to your unique way of learning.
      </p>
      <div className="space-y-4 sm:space-y-0 sm:space-x-4">
        <Link
          to="/signup"
          className="button-primary inline-block text-lg px-8 py-3 w-full sm:w-auto" // Using generic button class
        >
          Get Started (Sign Up)
        </Link>
        <Link
          to="/login"
          className="button-secondary inline-block text-lg px-8 py-3 w-full sm:w-auto" // Using generic button class
        >
          Already have an account? Login
        </Link>
      </div>
      {/* You could add some feature highlights or graphics here */}
      {/* For example:
      <div className="mt-16 grid md:grid-cols-3 gap-8 max-w-5xl mx-auto">
        <div className="card p-6">
          <h3 className="text-xl font-semibold mb-2">Customizable Content</h3>
          <p className="text-[var(--color-text-secondary)] text-sm">Choose how you learn: text, video, audio, or visual maps.</p>
        </div>
        <div className="card p-6">
          <h3 className="text-xl font-semibold mb-2">Distraction-Free</h3>
          <p className="text-[var(--color-text-secondary)] text-sm">Minimal UI with adjustable fonts and colors for focus.</p>
        </div>
        <div className="card p-6">
          <h3 className="text-xl font-semibold mb-2">AI Companion</h3>
          <p className="text-[var(--color-text-secondary)] text-sm">Get personalized guidance and explanations on any topic.</p>
        </div>
      </div>
      */}
    </div>
  );
};

export default HomePage;

===== File: /src/pages/LoginPage.jsx =====
// src/pages/LoginPage.jsx
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate, Link } from 'react-router-dom';

const LoginPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const { login, loading, error, setError } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null);
        const success = await login({ email, password });
        if (success) {
            navigate('/dashboard');
        }
    };

    // Example error display class
    const errorClass = "mb-4 text-sm text-red-600 bg-red-100 dark:bg-red-900/30 dark:text-red-300 body-theme-high-contrast:bg-hc-background body-theme-high-contrast:text-hc-link body-theme-high-contrast:border body-theme-high-contrast:border-hc-link p-3 rounded";

    return (
        <div className="max-w-md mx-auto mt-10">
            <div className="card"> {/* Using .card class */}
                <h2 className="text-2xl font-bold mb-6 text-center">Login</h2>
                <form onSubmit={handleSubmit} className="space-y-6">
                    {error && <p className={errorClass}>{error}</p>}
                    <div>
                        <label className="form-label-default" htmlFor="email">Email</label>
                        <input
                            type="email"
                            id="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            className="form-input-default" // Using generic input class
                            required
                        />
                    </div>
                    <div>
                        <label className="form-label-default" htmlFor="password">Password</label>
                        <input
                            type="password"
                            id="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            className="form-input-default" // Using generic input class
                            required
                        />
                    </div>
                    <button
                        type="submit"
                        disabled={loading}
                        className="button-primary w-full" // Using generic button class
                    >
                        {loading ? 'Logging in...' : 'Login'}
                    </button>
                </form>
                <p className="mt-6 text-center text-sm text-[var(--color-text-secondary)]">
                    Don't have an account?{' '}
                    <Link to="/signup" className="font-medium"> {/* Link uses global 'a' style */}
                        Sign up here
                    </Link>
                </p>
            </div>
        </div>
    );
};

export default LoginPage;

===== File: /src/pages/SignupPage.jsx =====
// src/pages/SignupPage.jsx
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate, Link } from 'react-router-dom';

const SignupPage = () => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const { signup, loading, error, setError } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null);
        const success = await signup({ name, email, password });
        if (success) {
            navigate('/dashboard');
        }
    };

    const errorClass = "mb-4 text-sm text-red-600 bg-red-100 dark:bg-red-900/30 dark:text-red-300 body-theme-high-contrast:bg-hc-background body-theme-high-contrast:text-hc-link body-theme-high-contrast:border body-theme-high-contrast:border-hc-link p-3 rounded";


    return (
        <div className="max-w-md mx-auto mt-10">
            <div className="card"> {/* Using .card class */}
                <h2 className="text-2xl font-bold mb-6 text-center">Create Account</h2>
                <form onSubmit={handleSubmit} className="space-y-6">
                    {error && <p className={errorClass}>{error}</p>}
                    <div>
                        <label className="form-label-default" htmlFor="name">Name (Optional)</label>
                        <input
                            type="text"
                            id="name"
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                            className="form-input-default" // Using generic input class
                        />
                    </div>
                    <div>
                        <label className="form-label-default" htmlFor="email">Email</label>
                        <input
                            type="email"
                            id="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            className="form-input-default" // Using generic input class
                            required
                        />
                    </div>
                    <div>
                        <label className="form-label-default" htmlFor="password">Password</label>
                        <input
                            type="password"
                            id="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            className="form-input-default" // Using generic input class
                            required
                            minLength="6"
                        />
                        <p className="text-xs text-[var(--color-text-secondary)] mt-1">Minimum 6 characters</p>
                    </div>
                    <button
                        type="submit"
                        disabled={loading}
                        className="button-primary w-full" // Using generic button class
                    >
                        {loading ? 'Creating Account...' : 'Sign Up'}
                    </button>
                </form>
                <p className="mt-6 text-center text-sm text-[var(--color-text-secondary)]">
                    Already have an account?{' '}
                    <Link to="/login" className="font-medium"> {/* Link uses global 'a' style */}
                        Login here
                    </Link>
                </p>
            </div>
        </div>
    );
};

export default SignupPage;

===== File: /src/pages/UserProfilePage.jsx =====
// src/pages/UserProfilePage.jsx
import React from 'react';
import UserProfile from '../components/UserProfile'; // Adjust path if needed

const UserProfilePage = () => {
  return (
    <div>
      {/* You can add a page title or other layout elements here if needed */}
      <UserProfile />
    </div>
  );
};

export default UserProfilePage;

===== File: /src/pages/admin/AdminContentListPage.jsx =====
// src/pages/admin/AdminContentListPage.jsx
import React, { useEffect, useState, useCallback } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { getPublishedContentList, deleteContent } from '../../services/contentService';
import { toast } from 'react-toastify';

const LoadingMessage = () => <div className="p-4 text-center text-[var(--color-text-secondary)]">Loading content...</div>;
const ErrorAlert = ({ message }) => (
    <div className="my-4 p-3 rounded text-sm bg-red-100 border border-red-300 text-red-700 dark:bg-red-900/20 dark:border-red-700 dark:text-red-300 body-theme-high-contrast:bg-hc-background body-theme-high-contrast:border-hc-link body-theme-high-contrast:text-hc-link" role="alert">{message}</div>
);

const Pagination = ({ currentPage, totalPages, onPageChange, disabled }) => {
  if (totalPages <= 1) return null;
  const pageNumbers = [];
  const maxPagesToShow = 5;
  let startPage, endPage;
  if (totalPages <= maxPagesToShow) {
    startPage = 1;
    endPage = totalPages;
  } else {
    if (currentPage <= Math.ceil(maxPagesToShow / 2)) {
      startPage = 1;
      endPage = maxPagesToShow;
    } else if (currentPage + Math.floor(maxPagesToShow / 2) >= totalPages) {
      startPage = totalPages - maxPagesToShow + 1;
      endPage = totalPages;
    } else {
      startPage = currentPage - Math.floor(maxPagesToShow / 2);
      endPage = currentPage + Math.floor(maxPagesToShow / 2);
    }
  }
  for (let i = startPage; i <= endPage; i++) {
    pageNumbers.push(i);
  }
  return (
    <nav aria-label="Content pagination" className="mt-6 flex justify-center">
      <ul className="inline-flex items-center -space-x-px">
        <li><button onClick={() => onPageChange(1)} disabled={disabled || currentPage === 1} className="px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50">First</button></li>
        <li><button onClick={() => onPageChange(currentPage - 1)} disabled={disabled || currentPage === 1} className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50">Prev</button></li>
        {startPage > 1 && <li><span className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400">...</span></li>}
        {pageNumbers.map(number => (<li key={number}><button onClick={() => onPageChange(number)} disabled={disabled} className={`px-3 py-2 leading-tight border ${ currentPage === number ? 'text-primary-dark bg-primary/20 border-primary-dark dark:bg-primary-light/30 dark:text-white dark:border-primary-light font-semibold' : 'text-gray-500 bg-white border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}`}>{number}</button></li>))}
        {endPage < totalPages && <li><span className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400">...</span></li>}
        <li><button onClick={() => onPageChange(currentPage + 1)} disabled={disabled || currentPage === totalPages} className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50">Next</button></li>
        <li><button onClick={() => onPageChange(totalPages)} disabled={disabled || currentPage === totalPages} className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50">Last</button></li>
      </ul>
    </nav>
  );
};


const AdminContentListPage = () => {
  const [contentData, setContentData] = useState({ contents: [], currentPage: 1, totalPages: 1, totalContents: 0 });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  const location = useLocation();
  const navigate = useNavigate();
  const basePath = window.location.pathname.startsWith('/admin') ? '/admin' : '/creator';
  
  const parseQueryParams = useCallback(() => {
    const params = new URLSearchParams(location.search);
    return {
      search: params.get('search') || '',
      tag: params.get('tag') || '',
      sortBy: params.get('sortBy') || 'createdAt:desc',
      page: parseInt(params.get('page')) || 1,
      limit: parseInt(params.get('limit')) || 10,
    };
  }, [location.search]);

  const [activeFilters, setActiveFilters] = useState(parseQueryParams());

  useEffect(() => {
    setActiveFilters(parseQueryParams());
  }, [parseQueryParams]);

  const fetchContents = useCallback(async (filtersToFetch) => {
    setLoading(true);
    setError(null);
    try {
      const data = await getPublishedContentList(filtersToFetch);
      setContentData(data);
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to fetch content list.');
      console.error("Fetch content list error:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    const paramsForUrl = new URLSearchParams();
    Object.entries(activeFilters).forEach(([key, value]) => {
      if (value) { // Only add if value is not empty/null/undefined
        if (key === 'page' && value === 1 && !paramsForUrl.has('page')) { /* skip if default */ }
        else if (key === 'limit' && value === 10 && !paramsForUrl.has('limit')) { /* skip if default */ }
        else if (key === 'sortBy' && value === 'createdAt:desc' && !paramsForUrl.has('sortBy')) { /* skip if default */ }
        else {
          paramsForUrl.set(key, value);
        }
      }
    });
    const newSearchString = paramsForUrl.toString();
    
    if (location.search.substring(1) !== newSearchString) {
        navigate(`${location.pathname}?${newSearchString}`, { replace: true });
    }
    fetchContents(activeFilters);
  }, [activeFilters, fetchContents, navigate, location.pathname, location.search]);


  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setActiveFilters(prev => ({ ...prev, [name]: value.trim(), page: 1 }));
  };

  const handleSortChange = (e) => {
    setActiveFilters(prev => ({ ...prev, sortBy: e.target.value, page: 1 }));
  };
  
  const handlePageChange = (pageNumber) => {
    if (pageNumber >= 1 && pageNumber <= contentData.totalPages && pageNumber !== activeFilters.page) {
      setActiveFilters(prev => ({ ...prev, page: pageNumber }));
    }
  };

  const handleLimitChange = (e) => {
    setActiveFilters(prev => ({ ...prev, limit: parseInt(e.target.value), page: 1 }));
  }

  const handleDelete = async (contentId, topic) => {
    if (window.confirm(`Are you sure you want to delete the topic "${topic.replace(/-/g, ' ')}"? This action cannot be undone.`)) {
      try {
        await deleteContent(contentId);
        toast.success(`Topic "${topic.replace(/-/g, ' ')}" deleted successfully.`);
        const newPage = (contentData.contents.length === 1 && activeFilters.page > 1) ? activeFilters.page - 1 : activeFilters.page;
        // Trigger refetch by updating filters which useEffect listens to
        setActiveFilters(prev => ({ ...prev, page: newPage, _triggerRefetch: Date.now() })); // Add a dummy prop to ensure state change
      } catch (err) {
        const deleteError = err.response?.data?.error || `Failed to delete topic "${topic.replace(/-/g, ' ')}".`;
        setError(deleteError); 
        toast.error(deleteError);
      }
    }
  };

  if (loading && contentData.contents.length === 0 && activeFilters.page === 1) return <LoadingMessage />;

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div className="flex items-center gap-2">
           <Link to={basePath} className="p-1.5 rounded-md hover:bg-gray-200 dark:hover:bg-slate-700 transition-colors" title={`Back to ${basePath === '/admin' ? 'Admin' : 'Creator'} Dashboard`}>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5 text-[var(--color-text-secondary)]">
              <path fillRule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.56l2.72 2.72a.75.75 0 1 1-1.06 1.06l-4-4a.75.75 0 0 1 0-1.06l4-4a.75.75 0 0 1 1.06 1.06L5.56 9.25H16.25A.75.75 0 0 1 17 10Z" clipRule="evenodd" />
            </svg>
          </Link>
          <h1 className="text-2xl font-semibold">Manage Content</h1>
        </div>
        <Link to={`${basePath}/content/create`} className="button-primary text-sm whitespace-nowrap">
          Create New Content
        </Link>
      </div>

      {error && <ErrorAlert message={error} />}

      <div className="card p-4 space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div>
              <label htmlFor="search-content" className="form-label-default">Search Topic/Tag/Text</label>
              <input
                type="search" name="search" id="search-content"
                placeholder="Enter keyword..."
                className="form-input-default"
                value={activeFilters.search}
                onChange={handleFilterChange}
              />
            </div>
            <div>
              <label htmlFor="tag-filter" className="form-label-default">Filter by Specific Tag</label>
              <input
                type="text" name="tag" id="tag-filter"
                placeholder="Enter exact tag..."
                className="form-input-default"
                value={activeFilters.tag}
                onChange={handleFilterChange}
              />
            </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="sort-by" className="form-label-default">Sort By</label>
              <select name="sortBy" id="sort-by" value={activeFilters.sortBy} onChange={handleSortChange} className="form-input-default">
                <option value="createdAt:desc">Created Date (Newest)</option>
                <option value="createdAt:asc">Created Date (Oldest)</option>
                <option value="topic:asc">Topic (A-Z)</option>
                <option value="topic:desc">Topic (Z-A)</option>
                <option value="updatedAt:desc">Last Updated (Newest)</option>
                <option value="updatedAt:asc">Last Updated (Oldest)</option>
              </select>
            </div>
            <div>
              <label htmlFor="limit-select" className="form-label-default">Items per Page</label>
              <select id="limit-select" name="limit" value={activeFilters.limit} onChange={handleLimitChange} className="form-input-default !w-auto">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
              </select>
            </div>
        </div>
      </div>

      {loading && contentData.contents.length === 0 && <div className="p-4 text-center text-sm text-[var(--color-text-secondary)] animate-pulse">Updating list...</div>}

      {!loading && contentData.contents.length === 0 && (
        <div className="card text-center py-8">
            <p className="text-[var(--color-text-secondary)]">
              {(activeFilters.search || activeFilters.tag) ? `No content matches your criteria.` : "No content found. Get started by creating some!"}
            </p>
        </div>
      )}

      {contentData.contents.length > 0 && (
        <div className="card overflow-x-auto p-0 md:p-0">
          <table className="min-w-full divide-y divide-[var(--color-border)]">
            <thead className="bg-gray-100 dark:bg-slate-800 body-theme-high-contrast:bg-gray-900">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-[var(--color-text-secondary)] uppercase tracking-wider">Topic</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-[var(--color-text-secondary)] uppercase tracking-wider">Tags</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-[var(--color-text-secondary)] uppercase tracking-wider">Created By</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-[var(--color-text-secondary)] uppercase tracking-wider">Created</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-[var(--color-text-secondary)] uppercase tracking-wider">Updated</th>
                <th className="px-6 py-3 text-right text-xs font-medium text-[var(--color-text-secondary)] uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-[var(--color-border)]">
              {contentData.contents.map((content) => (
                <tr key={content._id} className="hover:bg-gray-50 dark:hover:bg-slate-800/50 body-theme-high-contrast:hover:bg-gray-700 transition-colors duration-150">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-[var(--color-text-primary)] capitalize">{content.topic?.replace(/-/g, ' ')}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-[var(--color-text-secondary)] max-w-xs truncate" title={content.tags?.join(', ')}>{content.tags?.join(', ') || 'N/A'}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-[var(--color-text-secondary)]">{content.createdBy?.name || content.createdBy?.email || 'N/A'}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-[var(--color-text-secondary)]">{new Date(content.createdAt).toLocaleDateString()}</td>
                   <td className="px-6 py-4 whitespace-nowrap text-sm text-[var(--color-text-secondary)]">
                    {content.lastUpdatedBy ? `${content.lastUpdatedBy.name || content.lastUpdatedBy.email} on ` : ''}
                    {new Date(content.updatedAt).toLocaleDateString()}
                   </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-3">
                    <Link to={`${basePath}/content/edit/${content._id}`} className="text-primary dark:text-primary-light body-theme-high-contrast:text-hc-link hover:underline">
                      Edit
                    </Link>
                    <button onClick={() => handleDelete(content._id, content.topic)} className="text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 body-theme-high-contrast:text-red-400 body-theme-high-contrast:hover:text-red-300 hover:underline">
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      <Pagination 
        currentPage={activeFilters.page} 
        totalPages={contentData.totalPages} 
        onPageChange={handlePageChange} 
        disabled={loading}
      />
       <p className="text-sm text-center text-[var(--color-text-secondary)] mt-2">
        Showing {contentData.contents.length} of {contentData.totalContents} total entries.
      </p>
    </div>
  );
};

export default AdminContentListPage;

===== File: /src/pages/admin/AdminCreateContentPage.jsx =====
// src/pages/admin/AdminCreateContentPage.jsx
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { createContent } from '../../services/contentService';
import TagInput from '../../components/admin/TagInput';
import DynamicUrlInput from '../../components/admin/DynamicUrlInput';
import { toast } from 'react-toastify';


const FormField = ({ id, label, type = 'text', value, onChange, required = false, textarea = false, placeholder, name, rows = 3 }) => (
  <div className="form-field-default">
    <label htmlFor={id || name} className="form-label-default">{label}{required && <span className="text-red-500 ml-1">*</span>}</label>
    {textarea ? ( <textarea id={id || name} name={name || id} rows={rows} value={value} onChange={onChange} required={required} placeholder={placeholder} className="form-input-default"/>
    ) : ( <input type={type} id={id || name} name={name || id} value={value} onChange={onChange} required={required} placeholder={placeholder} className="form-input-default"/> )}
  </div>
);
const ErrorAlert = ({ message }) => (
    <div className="my-4 p-3 rounded text-sm bg-red-100 border border-red-300 text-red-700 dark:bg-red-900/20 dark:border-red-700 dark:text-red-300 body-theme-high-contrast:bg-hc-background body-theme-high-contrast:border-hc-link body-theme-high-contrast:text-hc-link" role="alert">{message}</div>
);

const AdminCreateContentPage = () => {
  const [formData, setFormData] = useState({
    topic: '', 
    originalText: '',
  });
  const [tags, setTags] = useState([]);
  const [imageUrls, setImageUrls] = useState([]);

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const basePath = window.location.pathname.startsWith('/admin') ? '/admin' : '/creator';


  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null); 

    const contentData = {
      ...formData,
      topic: formData.topic.trim(), 
      tags: tags,
      imageUrls: imageUrls.filter(url => url && url.trim() !== ''),
      videoExplainers: [], 
      audioNarrations: [], 
    };

    if (!contentData.topic || !contentData.originalText) {
        setError("Topic Title and Original Text are required.");
        toast.error("Topic Title and Original Text are required.");
        setLoading(false);
        return;
    }

    try {
      const newContent = await createContent(contentData); // Backend returns the created content
      toast.success(`Content "${newContent.topic.replace(/-/g,' ')}" created successfully!`);
      navigate(`${basePath}/content/edit/${newContent._id}`); // Navigate to edit page of new content
    } catch (err) {
      const errMsg = err.response?.data?.error || 'Failed to create content.';
      setError(errMsg); 
      toast.error(errMsg);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
        <div className="flex items-center gap-2 mb-2">
          <Link to={`${basePath}/content`} className="p-1.5 rounded-md hover:bg-gray-200 dark:hover:bg-slate-700 transition-colors" title="Back to Content List">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5 text-[var(--color-text-secondary)]">
              <path fillRule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.56l2.72 2.72a.75.75 0 1 1-1.06 1.06l-4-4a.75.75 0 0 1 0-1.06l4-4a.75.75 0 0 1 1.06 1.06L5.56 9.25H16.25A.75.75 0 0 1 17 10Z" clipRule="evenodd" />
            </svg>
          </Link>
          <h1 className="text-2xl font-semibold">Create New Content</h1>
        </div>

      <form onSubmit={handleSubmit} className="card max-w-2xl mx-auto p-6 md:p-8">
        {error && <ErrorAlert message={error} />}

        <FormField name="topic" label="Topic Title (human-readable)" value={formData.topic} onChange={handleChange} required placeholder="e.g., Photosynthesis Basics"/>
        <FormField name="originalText" label="Original Content Text" value={formData.originalText} onChange={handleChange} textarea rows="10" required placeholder="Enter the full educational text here..."/>
        
        <TagInput
          initialTags={tags}
          onChange={setTags}
          label="Tags"
          placeholder="Add relevant tags"
        />

        <DynamicUrlInput
          initialUrls={imageUrls}
          onChange={setImageUrls}
          label="Image URLs"
          placeholder="https://example.com/image.jpg"
        />

        <p className="text-xs text-[var(--color-text-secondary)] mt-6 mb-2">
            Video explainers and audio narrations can be added after creation via the "Edit Content" page.
        </p>

        <button type="submit" disabled={loading} className="button-primary w-full mt-4">
          {loading ? 'Creating...' : 'Create Content'}
        </button>
      </form>
    </div>
  );
};

export default AdminCreateContentPage;

===== File: /src/pages/admin/AdminDashboardPage.jsx =====
// src/pages/admin/AdminDashboardPage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const ContentIcon = () => <span className="text-2xl mr-2">ð</span>;
const UsersIcon = () => <span className="text-2xl mr-2">ð¥</span>;
const SettingsIcon = () => <span className="text-2xl mr-2">âï¸</span>;
const AnalyticsIcon = () => <span className="text-2xl mr-2">ð</span>;


const AdminDashboardPage = () => {
  const { user } = useAuth();

  return (
    <div className="container mx-auto p-4 md:p-6">
      <h1>Admin Dashboard</h1>
      <p className="mb-8 text-lg text-[var(--color-text-secondary)]">
        Welcome back, <span className="font-semibold">{user?.name || user?.email || 'Admin'}</span>!
      </p>

      <h2 className="text-2xl font-semibold text-[var(--color-text-primary)] mb-6">Management Sections</h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <Link
          to="/admin/content"
          className="card hover:shadow-lg transition-shadow"
        >
          <div className="flex items-center mb-3">
            <ContentIcon />
            <h3 className="text-xl font-semibold text-[var(--color-text-primary)]">Manage Content</h3>
          </div>
          <p className="text-[var(--color-text-secondary)] text-sm">
            Create, edit, and delete learning topics and their associated materials.
          </p>
        </Link>

        <Link
          to="/admin/users"
          className="card hover:shadow-lg transition-shadow"
        >
          <div className="flex items-center mb-3">
            <UsersIcon />
            <h3 className="text-xl font-semibold text-[var(--color-text-primary)]">Manage Users</h3>
          </div>
          <p className="text-[var(--color-text-secondary)] text-sm">
            View user accounts, change roles, and manage platform access.
          </p>
        </Link>

        <div
          className="card opacity-60 cursor-not-allowed"
          title="Platform settings coming soon"
        >
          <div className="flex items-center mb-3">
            <SettingsIcon />
            <h3 className="text-xl font-semibold text-gray-500 dark:text-slate-400">Platform Settings</h3>
          </div>
          <p className="text-gray-500 dark:text-slate-400 text-sm">
            Configure global settings for the learning portal. (Coming Soon)
          </p>
        </div>

        <div
          className="card opacity-60 cursor-not-allowed"
          title="Analytics coming soon"
        >
          <div className="flex items-center mb-3">
            <AnalyticsIcon />
            <h3 className="text-xl font-semibold text-gray-500 dark:text-slate-400">Analytics & Reports</h3>
          </div>
          <p className="text-gray-500 dark:text-slate-400 text-sm">
            View usage statistics and learning progress insights. (Coming Soon)
          </p>
        </div>
      </div>
    </div>
  );
};

export default AdminDashboardPage;

===== File: /src/pages/admin/AdminEditContentPage.jsx =====
// src/pages/admin/AdminEditContentPage.jsx
import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom'; // Added useNavigate
import { getContentByIdForEditing, updateContent } from '../../services/contentService'; 
import MermaidDiagram from '../../components/common/MermaidDiagram';
import TagInput from '../../components/admin/TagInput';
import DynamicUrlInput from '../../components/admin/DynamicUrlInput';
import { toast } from 'react-toastify';

const FormField = ({ id, label, type = 'text', value, onChange, required = false, textarea = false, placeholder, disabled = false, name, rows = 3, children }) => (
  <div className="form-field-default">
    <label htmlFor={id || name} className="form-label-default">{label}{required && !disabled && <span className="text-red-500 ml-1">*</span>}</label>
    {textarea ? (
      <textarea id={id || name} name={name || id} rows={rows} value={value} onChange={onChange} required={required && !disabled} placeholder={placeholder} disabled={disabled} className={`form-input-default ${disabled ? 'opacity-70 cursor-not-allowed' : ''}`}/>
    ) : children ? (
      <div className={`form-input-default p-0 ${disabled ? 'opacity-70 cursor-not-allowed' : ''}`}>{children}</div>
    ) : (
      <input type={type} id={id || name} name={name || id} value={value} onChange={onChange} required={required && !disabled} placeholder={placeholder} disabled={disabled} className={`form-input-default ${disabled ? 'opacity-70 cursor-not-allowed' : ''}`}/>
    )}
  </div>
);

const LoadingMessage = () => <div className="p-6 text-center text-[var(--color-text-secondary)]">Loading content details...</div>;

const PageLoadError = ({ message, basePath }) => ( // Added basePath
    <div className="p-6 text-center card my-4">
        <p className="text-red-600 dark:text-red-400 body-theme-high-contrast:text-hc-link mb-4">{message}</p>
        <Link to={`${basePath}/content`} className="button-secondary text-sm">Go back to list</Link>
    </div>
);


const AdminEditContentPage = () => {
  const { contentId } = useParams();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    topicSlug: '', // Store the slug separately from display title
    displayTopic: '', // For the input field
    originalText: '',
    videoExplainers: [],
    audioNarrations: [],
    simplifiedVersions: [],
    visualMaps: [],
  });
  const [tags, setTags] = useState([]);
  const [imageUrls, setImageUrls] = useState([]);
  const [initialImageGallery, setInitialImageGallery] = useState([]);

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  
  const basePath = window.location.pathname.startsWith('/admin') ? '/admin' : '/creator';

  useEffect(() => {
    const fetchContent = async () => {
      setLoading(true);
      try {
        const data = await getContentByIdForEditing(contentId);
        setFormData({
          topicSlug: data.topic || '', // This is the slug from DB
          displayTopic: data.topic ? data.topic.replace(/-/g, ' ') : '', // Convert slug to human-readable for display
          originalText: data.originalText || '',
          videoExplainers: data.videoExplainers || [],
          audioNarrations: data.audioNarrations || [],
          simplifiedVersions: data.simplifiedVersions || [],
          visualMaps: data.visualMaps || [],
        });
        setTags(data.tags || []);
        const fetchedImageUrls = data.media?.imageUrls || [];
        setImageUrls(fetchedImageUrls);
        setInitialImageGallery(fetchedImageUrls);
      } catch (err) {
        const fetchErrorMsg = err.response?.data?.error || `Failed to fetch content (ID: ${contentId}).`;
        toast.error(fetchErrorMsg);
      } finally {
        setLoading(false);
      }
    };
    if (contentId) {
        fetchContent();
    } else {
        toast.error("Content ID is missing.");
        setLoading(false);
        navigate(`${basePath}/content`);
    }
  }, [contentId, basePath, navigate]);

  const handleDisplayTopicChange = (e) => {
    const newDisplayTopic = e.target.value;
    setFormData(prev => ({ 
        ...prev, 
        displayTopic: newDisplayTopic,
        // topicSlug will be updated on submit based on displayTopic, or backend handles slug generation
    }));
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleArrayChange = (setterFunc, fieldData) => setterFunc(fieldData);
  const handleVideoChange = (index, field, value) => handleArrayChange(setFormData, prev => ({ ...prev, videoExplainers: prev.videoExplainers.map((video, i) => i === index ? { ...video, [field]: value } : video)}));
  const handleAddVideoField = () => handleArrayChange(setFormData, prev => ({ ...prev, videoExplainers: [...prev.videoExplainers, { source: 'youtube', url: '', title: '', description: '' }]}));
  const handleRemoveVideoField = (index) => handleArrayChange(setFormData, prev => ({ ...prev, videoExplainers: prev.videoExplainers.filter((_, i) => i !== index)}));
  const handleAudioChange = (index, field, value) => handleArrayChange(setFormData, prev => ({ ...prev, audioNarrations: prev.audioNarrations.map((audio, i) => i === index ? { ...audio, [field]: value } : audio)}));
  const handleAddAudioField = () => handleArrayChange(setFormData, prev => ({ ...prev, audioNarrations: [...prev.audioNarrations, { language: 'en-US', voice: 'default', url: '' }]}));
  const handleRemoveAudioField = (index) => handleArrayChange(setFormData, prev => ({ ...prev, audioNarrations: prev.audioNarrations.filter((_, i) => i !== index)}));

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.displayTopic || !formData.originalText) {
        toast.error("Topic Title and Original Text are required.");
        return;
    }
    setSaving(true);

    const contentDataToUpdate = {
      // Send the human-readable title; backend will re-slugify it.
      // This allows users to change the human-readable title naturally.
      topic: formData.displayTopic.trim(), 
      originalText: formData.originalText,
      tags: tags,
      imageUrls: imageUrls.filter(url => url && url.trim() !== ''),
      videoExplainers: formData.videoExplainers.filter(video => video.url && video.url.trim() !== ''),
      audioNarrations: formData.audioNarrations.filter(audio => audio.url && audio.url.trim() !== ''),
    };

    try {
      const updatedContent = await updateContent(contentId, contentDataToUpdate);
      toast.success('Content updated successfully!');
      if (updatedContent) {
        setFormData(prev => ({
            ...prev,
            topicSlug: updatedContent.topic || prev.topicSlug,
            displayTopic: updatedContent.topic ? updatedContent.topic.replace(/-/g, ' ') : prev.displayTopic,
            originalText: updatedContent.originalText || prev.originalText,
            videoExplainers: updatedContent.videoExplainers || [],
            audioNarrations: updatedContent.audioNarrations || [],
            simplifiedVersions: updatedContent.simplifiedVersions || [],
            visualMaps: updatedContent.visualMaps || [],
        }));
        const updatedImageUrls = updatedContent.media?.imageUrls || [];
        setTags(updatedContent.tags || []);
        setImageUrls(updatedImageUrls);
        setInitialImageGallery(updatedImageUrls);
      }
    } catch (err) {
      const updateErrorMsg = err.response?.data?.error || 'Failed to update content.';
      toast.error(updateErrorMsg);
    } finally {
      setSaving(false);
    }
  };

  if (loading && !formData.displayTopic) return <LoadingMessage />;
  if (!loading && !formData.displayTopic && contentId) {
      return <PageLoadError message={`Failed to load content with ID: ${contentId}. It might have been deleted or an error occurred.`} basePath={basePath} />
  }

  return (
    <div className="space-y-6 pb-12">
      <div className="flex justify-between items-center mb-2">
        <Link to={`${basePath}/content`} className="text-sm hover:underline text-[var(--color-link)]">
            â Back to Content List
        </Link>
      </div>
      <h1 className="text-2xl font-semibold">Edit Content: <span className="capitalize text-[var(--color-link)]">{formData.displayTopic || "Loading..."}</span></h1>

      <form onSubmit={handleSubmit} className="card max-w-3xl mx-auto p-6 md:p-8">
        <fieldset className="border border-[var(--color-border)] p-4 rounded-md mb-6">
            <legend className="text-lg font-semibold text-[var(--color-text-secondary)] px-2">Core Content</legend>
            <FormField 
              name="displayTopic"
              label="Topic Title (human-readable)" 
              value={formData.displayTopic} // Use displayTopic for input
              onChange={handleDisplayTopicChange} // Use specific handler
              required 
              placeholder="e.g. Photosynthesis For Beginners"
            />
            <FormField name="originalText" label="Original Content Text" value={formData.originalText} onChange={handleChange} textarea rows="10" required />
            <TagInput 
              initialTags={tags} 
              onChange={(newTags) => handleArrayChange(setTags, newTags)} 
              label="Tags"
            />
            <DynamicUrlInput
              initialUrls={imageUrls} 
              onChange={(newUrls) => handleArrayChange(setImageUrls, newUrls)} 
              label="Image URLs (Editable)" 
            />
        </fieldset>

        {initialImageGallery && initialImageGallery.length > 0 && (
            <fieldset className="border border-[var(--color-border)] p-4 rounded-md mb-6">
                <legend className="text-lg font-semibold text-[var(--color-text-secondary)] px-2">Current Saved Images</legend>
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 mt-2">
                    {initialImageGallery.map((url, index) => (
                        url && typeof url === 'string' && url.trim() !== '' ? (
                            <div key={`gallery-${index}-${url}`} className="aspect-square bg-[var(--color-border)] rounded overflow-hidden shadow">
                                <img 
                                    src={url} 
                                    alt={`Saved content image ${index + 1}`}
                                    className="w-full h-full object-cover"
                                    loading="lazy"
                                    onError={(e) => { e.target.style.display='none'; if(e.target.parentElement) e.target.parentElement.innerHTML='<span class="text-xs p-1 text-red-500">Load Error</span>';}}
                                />
                            </div>
                        ) : null
                    ))}
                </div>
                <p className="text-xs text-[var(--color-text-secondary)] mt-2">
                    To change images, edit the "Image URLs (Editable)" section above and save. New images will appear here after saving.
                </p>
            </fieldset>
        )}

        <fieldset className="border border-[var(--color-border)] p-4 rounded-md mb-6">
          <legend className="text-lg font-semibold text-[var(--color-text-secondary)] px-2">Video Explainers</legend>
           {formData.videoExplainers.map((video, index) => (
            <div key={index} className="mb-4 p-3 border border-[var(--color-border)] rounded-md relative bg-[var(--color-background)] shadow-sm dark:bg-slate-800/30 body-theme-high-contrast:bg-gray-900">
              <button type="button" onClick={() => handleRemoveVideoField(index)} className="absolute top-2 right-2 text-red-500 hover:text-red-700 text-xs px-2 py-1 bg-white dark:bg-slate-700 dark:text-red-400 dark:hover:text-red-300 border border-red-300 dark:border-red-500 rounded body-theme-high-contrast:bg-hc-background body-theme-high-contrast:text-red-400 body-theme-high-contrast:border-red-400" title="Remove Video">Remove</button>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4">
                <FormField name={`videoUrl-${index}`} label="URL" value={video.url} onChange={(e) => handleVideoChange(index, 'url', e.target.value)} required />
                <FormField name={`videoSource-${index}`} label="Source">
                    <select id={`videoSource-${index}`} value={video.source} onChange={(e) => handleVideoChange(index, 'source', e.target.value)} className="w-full h-full bg-transparent border-none focus:ring-0 form-select">
                        <option value="youtube">YouTube</option> <option value="vimeo">Vimeo</option> <option value="custom_upload">Custom Upload</option> <option value="generated">AI Generated</option>
                  </select>
                </FormField>
              </div>
              <FormField name={`videoTitle-${index}`} label="Title (optional)" value={video.title} onChange={(e) => handleVideoChange(index, 'title', e.target.value)} />
              <FormField name={`videoDesc-${index}`} label="Description (brief, optional)" value={video.description} onChange={(e) => handleVideoChange(index, 'description', e.target.value)} textarea rows="2" />
            </div>
          ))}
          <button type="button" onClick={handleAddVideoField} className="button-secondary text-sm">+ Add Video Explainer</button>
        </fieldset>

        <fieldset className="border border-[var(--color-border)] p-4 rounded-md mb-6">
            <legend className="text-lg font-semibold text-[var(--color-text-secondary)] px-2">Audio Narrations (Manual URLs)</legend>
            {formData.audioNarrations.map((audio, index) => (
                <div key={index} className="mb-4 p-3 border border-[var(--color-border)] rounded-md relative bg-[var(--color-background)] shadow-sm dark:bg-slate-800/30 body-theme-high-contrast:bg-gray-900">
                    <button type="button" onClick={() => handleRemoveAudioField(index)} className="absolute top-2 right-2 text-red-500 hover:text-red-700 text-xs px-2 py-1 bg-white dark:bg-slate-700 dark:text-red-400 dark:hover:text-red-300 border border-red-300 dark:border-red-500 rounded body-theme-high-contrast:bg-hc-background body-theme-high-contrast:text-red-400 body-theme-high-contrast:border-red-400" title="Remove Audio">Remove</button>
                    <FormField name={`audioUrl-${index}`} label="Audio URL" value={audio.url} onChange={(e) => handleAudioChange(index, 'url', e.target.value)} required />
                </div>
            ))}
            <button type="button" onClick={handleAddAudioField} className="button-secondary text-sm">+ Add Audio Narration URL</button>
            <p className="text-xs text-[var(--color-text-secondary)] mt-2">
                Note: AI-generated audio is handled via the "Audio" mode on the content consumption page. These fields are for manually added URLs.
            </p>
        </fieldset>
        
         {(formData.simplifiedVersions?.length > 0 || formData.visualMaps?.length > 0) && (
          <div className="space-y-6 mt-6">
            {formData.simplifiedVersions?.length > 0 && (
              <fieldset className="border border-[var(--color-border)] p-4 rounded-md">
                <legend className="text-lg font-semibold text-[var(--color-text-secondary)] px-2">AI-Generated Simplified Texts</legend>
                {formData.simplifiedVersions.map((version, index) => (
                  <div key={`simple-${index}-${version.level}`} className="mb-3 p-3 border border-[var(--color-border)] rounded-md bg-[var(--color-background)] shadow-sm dark:bg-slate-800/30 body-theme-high-contrast:bg-gray-900">
                    <div className="flex justify-between items-center mb-1">
                        <p className="text-sm font-semibold text-[var(--color-text-primary)]">Level: <span className="capitalize font-normal bg-primary/10 text-primary dark:bg-primary-light/20 dark:text-primary-light px-2 py-0.5 rounded-full text-xs body-theme-high-contrast:bg-hc-link body-theme-high-contrast:text-hc-background">{version.level}</span></p>
                        <p className="text-xs text-[var(--color-text-secondary)]">{new Date(version.createdAt).toLocaleString()}</p>
                    </div>
                    <div className="mt-1 p-2 bg-[var(--color-card-background)] border border-[var(--color-border)] rounded max-h-48 overflow-y-auto text-sm">
                    <pre className="whitespace-pre-wrap break-words text-[var(--color-text-primary)]">{version.text}</pre>
                    </div>
                  </div>
                ))}
                 <p className="text-xs text-[var(--color-text-secondary)] mt-2">
                    These are generated on-demand by users/AI via the content consumption page. They are displayed here for review.
                </p>
              </fieldset>
            )}

            {formData.visualMaps?.length > 0 && (
              <fieldset className="border border-[var(--color-border)] p-4 rounded-md">
                <legend className="text-lg font-semibold text-[var(--color-text-secondary)] px-2">AI-Generated Visual Maps</legend>
                {formData.visualMaps.map((vMap, index) => (
                  <div key={`vmap-${index}-${vMap.format}`} className="mb-3 p-3 border border-[var(--color-border)] rounded-md bg-[var(--color-background)] shadow-sm dark:bg-slate-800/30 body-theme-high-contrast:bg-gray-900">
                    <div className="flex justify-between items-center mb-1">
                        <p className="text-sm font-semibold text-[var(--color-text-primary)]">Format: <span className="capitalize font-normal bg-secondary/10 text-secondary dark:bg-secondary-light/20 dark:text-secondary-light px-2 py-0.5 rounded-full text-xs body-theme-high-contrast:bg-hc-link body-theme-high-contrast:text-hc-background">{vMap.format}</span></p>
                        <p className="text-xs text-[var(--color-text-secondary)]">{new Date(vMap.createdAt).toLocaleString()}</p>
                    </div>
                    <div className="mt-1 p-2 bg-[var(--color-card-background)] border border-[var(--color-border)] rounded max-h-[400px] overflow-y-auto">
                    {vMap.format === 'mermaid' ? (
                        <MermaidDiagram chartData={vMap.data} diagramId={`admin-map-${contentId}-${index}-${new Date(vMap.createdAt).getTime()}`} />  
                    ) : (
                        <pre className="text-sm whitespace-pre-wrap break-words text-[var(--color-text-primary)]">{vMap.data}</pre>
                    )}
                    </div>
                    {vMap.notes && <p className="text-xs text-[var(--color-text-secondary)] mt-1 italic">Notes: {vMap.notes}</p>}
                  </div>
                ))}
                 <p className="text-xs text-[var(--color-text-secondary)] mt-2">
                    Generated on-demand by users/AI. Displayed for review.
                </p>
              </fieldset>
            )}
          </div>
        )}

        <button type="submit" disabled={saving || loading} className="button-primary w-full mt-8">
          {saving ? 'Saving Changes...' : 'Save Changes'}
        </button>
      </form>
    </div>
  );
};

export default AdminEditContentPage;

===== File: /src/pages/admin/AdminUserManagementPage.jsx =====
// src/pages/admin/AdminUserManagementPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { getAllUsersAdmin, updateUserRoleAdmin, deleteUserAdmin } from '../../services/userService';
import { useAuth } from '../../contexts/AuthContext';
import { toast } from 'react-toastify';

const LoadingMessage = () => <div className="p-4 text-center text-[var(--color-text-secondary)]">Loading users...</div>;
const ErrorAlert = ({ message }) => (
    <div className="my-4 p-3 rounded text-sm bg-red-100 border border-red-300 text-red-700 dark:bg-red-900/20 dark:border-red-700 dark:text-red-300 body-theme-high-contrast:bg-hc-background body-theme-high-contrast:border-hc-link body-theme-high-contrast:text-hc-link" role="alert">{message}</div>
);

const Pagination = ({ currentPage, totalPages, onPageChange, disabled }) => {
  if (totalPages <= 1) return null;
  const pageNumbers = [];
  const maxPagesToShow = 5;
  let startPage, endPage;
  if (totalPages <= maxPagesToShow) { startPage = 1; endPage = totalPages; } 
  else {
    if (currentPage <= Math.ceil(maxPagesToShow / 2)) { startPage = 1; endPage = maxPagesToShow; } 
    else if (currentPage + Math.floor(maxPagesToShow / 2) >= totalPages) { startPage = totalPages - maxPagesToShow + 1; endPage = totalPages; } 
    else { startPage = currentPage - Math.floor(maxPagesToShow / 2); endPage = currentPage + Math.floor(maxPagesToShow / 2); }
  }
  for (let i = startPage; i <= endPage; i++) { pageNumbers.push(i); }
  return (
    <nav aria-label="Users pagination" className="mt-6 flex justify-center">
      <ul className="inline-flex items-center -space-x-px">
        <li><button onClick={() => onPageChange(1)} disabled={disabled || currentPage === 1} className="px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50">First</button></li>
        <li><button onClick={() => onPageChange(currentPage - 1)} disabled={disabled || currentPage === 1} className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50">Prev</button></li>
        {startPage > 1 && <li><span className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400">...</span></li>}
        {pageNumbers.map(number => (<li key={number}><button onClick={() => onPageChange(number)} disabled={disabled} className={`px-3 py-2 leading-tight border ${ currentPage === number ? 'text-primary-dark bg-primary/20 border-primary-dark dark:bg-primary-light/30 dark:text-white dark:border-primary-light font-semibold' : 'text-gray-500 bg-white border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'}`}>{number}</button></li>))}
        {endPage < totalPages && <li><span className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400">...</span></li>}
        <li><button onClick={() => onPageChange(currentPage + 1)} disabled={disabled || currentPage === totalPages} className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50">Next</button></li>
        <li><button onClick={() => onPageChange(totalPages)} disabled={disabled || currentPage === totalPages} className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50">Last</button></li>
      </ul>
    </nav>
  );
};


const AdminUserManagementPage = () => {
  const { user: currentUser } = useAuth(); 
  const [userData, setUserData] = useState({ users: [], currentPage: 1, totalPages: 1, totalUsers: 0});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  const location = useLocation();
  const navigate = useNavigate();

  const parseUserQueryParams = useCallback(() => {
    const params = new URLSearchParams(location.search);
    return {
      search: params.get('search') || '',
      role: params.get('role') || '',
      sortBy: params.get('sortBy') || 'createdAt:desc',
      page: parseInt(params.get('page')) || 1,
      limit: parseInt(params.get('limit')) || 10,
    };
  }, [location.search]);

  const [activeUserFilters, setActiveUserFilters] = useState(parseUserQueryParams());

  useEffect(() => {
    setActiveUserFilters(parseUserQueryParams());
  }, [parseUserQueryParams]);

  const fetchUsers = useCallback(async (filtersToFetch) => {
    setLoading(true);
    setError(null);
    try {
      const data = await getAllUsersAdmin(filtersToFetch);
      setUserData(data);
    } catch (err) {
      const errorMsg = err.response?.data?.error || 'Failed to fetch users.';
      setError(errorMsg);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    const paramsForUrl = new URLSearchParams();
    Object.entries(activeUserFilters).forEach(([key, value]) => {
      if (value) { 
        if (key === 'page' && value === 1 && !paramsForUrl.has('page')) { /* skip */ }
        else if (key === 'limit' && value === 10 && !paramsForUrl.has('limit')) { /* skip */ }
        else if (key === 'sortBy' && value === 'createdAt:desc' && !paramsForUrl.has('sortBy')) { /* skip */ }
        else { paramsForUrl.set(key, value); }
      }
    });
    const newSearchString = paramsForUrl.toString();

    if (location.search.substring(1) !== newSearchString) {
      navigate(`${location.pathname}?${newSearchString}`, { replace: true });
    }
    fetchUsers(activeUserFilters);
  }, [activeUserFilters, fetchUsers, navigate, location.pathname, location.search]);


  const handleUserFilterChange = (e) => {
    const { name, value } = e.target;
    setActiveUserFilters(prev => ({ ...prev, [name]: value.trim(), page: 1 }));
  };

  const handleUserSortChange = (e) => {
    setActiveUserFilters(prev => ({ ...prev, sortBy: e.target.value, page: 1 }));
  };

  const handleUserPageChange = (pageNumber) => {
     if (pageNumber >= 1 && pageNumber <= userData.totalPages && pageNumber !== activeUserFilters.page) {
      setActiveUserFilters(prev => ({ ...prev, page: pageNumber }));
    }
  };
  
  const handleUserLimitChange = (e) => {
    setActiveUserFilters(prev => ({ ...prev, limit: parseInt(e.target.value), page: 1}));
  }


  const handleRoleChange = async (userId, newRole) => {
    if (currentUser._id === userId && newRole !== 'admin') {
        const adminUsers = userData.users.filter(u => u.role === 'admin');
        if (adminUsers.length <= 1) {
            toast.error("Cannot remove the last admin's role.");
            // Revert UI change if select is directly bound
            setTimeout(() => fetchUsers(activeUserFilters), 0); // Re-fetch to revert
            return;
        }
    }
    try {
      const updatedUser = await updateUserRoleAdmin(userId, newRole);
      setUserData(prevData => ({
          ...prevData,
          users: prevData.users.map(u => u._id === userId ? { ...u, role: updatedUser.role } : u)
      }));
      toast.success('User role updated successfully!');
    } catch (err) {
      toast.error(err.response?.data?.error || 'Failed to update role.');
      setTimeout(() => fetchUsers(activeUserFilters), 0); // Re-fetch to revert
    }
  };

  const handleDeleteUser = async (userIdToDelete, userName) => {
    if (currentUser._id === userIdToDelete) {
        toast.error("You cannot delete your own account.");
        return;
    }
    if (window.confirm(`Are you sure you want to delete user "${userName || 'this user'}"? This action cannot be undone.`)) {
      try {
        await deleteUserAdmin(userIdToDelete);
        toast.success(`User "${userName || 'User'}" deleted successfully.`);
        const newPage = (userData.users.length === 1 && activeUserFilters.page > 1) ? activeUserFilters.page - 1 : activeUserFilters.page;
        setActiveUserFilters(prev => ({ ...prev, page: newPage, _triggerRefetch: Date.now() }));
      } catch (err) {
        toast.error(err.response?.data?.error || 'Failed to delete user.');
      }
    }
  };


  if (loading && userData.users.length === 0 && activeUserFilters.page === 1) return <LoadingMessage />;

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div className="flex items-center gap-2">
           <Link to="/admin" className="p-1.5 rounded-md hover:bg-gray-200 dark:hover:bg-slate-700 transition-colors" title="Back to Admin Dashboard">
             <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5 text-[var(--color-text-secondary)]">
               <path fillRule="evenodd" d="M17 10a.75.75 0 0 1-.75.75H5.56l2.72 2.72a.75.75 0 1 1-1.06 1.06l-4-4a.75.75 0 0 1 0-1.06l4-4a.75.75 0 0 1 1.06 1.06L5.56 9.25H16.25A.75.75 0 0 1 17 10Z" clipRule="evenodd" />
             </svg>
           </Link>
          <h1 className="text-2xl font-semibold">User Management</h1>
        </div>
      </div>
      
      {error && <ErrorAlert message={error} />}

      <div className="card p-4 space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div>
                <label htmlFor="search-users" className="form-label-default">Search by Name or Email</label>
                <input
                type="search" name="search" id="search-users"
                placeholder="Enter name or email..."
                className="form-input-default"
                value={activeUserFilters.search}
                onChange={handleUserFilterChange}
                />
            </div>
            <div>
                <label htmlFor="role-filter" className="form-label-default">Filter by Role</label>
                <select name="role" id="role-filter" className="form-input-default" value={activeUserFilters.role} onChange={handleUserFilterChange}>
                <option value="">All Roles</option>
                <option value="user">User</option>
                <option value="creator">Creator</option>
                <option value="admin">Admin</option>
                </select>
            </div>
            <div>
              <label htmlFor="user-sort-by" className="form-label-default">Sort By</label>
              <select name="sortBy" id="user-sort-by" value={activeUserFilters.sortBy} onChange={handleUserSortChange} className="form-input-default">
                <option value="createdAt:desc">Joined Date (Newest)</option>
                <option value="createdAt:asc">Joined Date (Oldest)</option>
                <option value="name:asc">Name (A-Z)</option>
                <option value="name:desc">Name (Z-A)</option>
                <option value="email:asc">Email (A-Z)</option>
                <option value="email:desc">Email (Z-A)</option>
              </select>
            </div>
        </div>
        <div>
            <label htmlFor="user-limit-select" className="form-label-default">Items per Page</label>
            <select id="user-limit-select" name="limit" value={activeUserFilters.limit} onChange={handleUserLimitChange} className="form-input-default !w-auto">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="50">50</option>
            </select>
        </div>
      </div>

      {loading && userData.users.length === 0 && <div className="p-4 text-center text-sm text-[var(--color-text-secondary)] animate-pulse">Updating list...</div>}


      {!loading && userData.users.length === 0 && (
        <div className="card text-center py-8">
            <p className="text-[var(--color-text-secondary)]">
                {(activeUserFilters.search || activeUserFilters.role) ? 'No users match your criteria.' : 'No users found.'}
            </p>
        </div>
      )}

      {userData.users.length > 0 && (
        <div className="card overflow-x-auto p-0 md:p-0">
          <table className="min-w-full divide-y divide-[var(--color-border)]">
            <thead className="bg-gray-100 dark:bg-slate-800 body-theme-high-contrast:bg-gray-900">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-[var(--color-text-secondary)] uppercase tracking-wider">Name</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-[var(--color-text-secondary)] uppercase tracking-wider">Email</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-[var(--color-text-secondary)] uppercase tracking-wider">Role</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-[var(--color-text-secondary)] uppercase tracking-wider">Joined</th>
                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-[var(--color-text-secondary)] uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-[var(--color-border)]">
              {userData.users.map((user) => (
                <tr key={user._id} className="hover:bg-gray-50 dark:hover:bg-slate-800/50 body-theme-high-contrast:hover:bg-gray-700 transition-colors duration-150">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-[var(--color-text-primary)]">{user.name || 'N/A'}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-[var(--color-text-secondary)]">{user.email}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-[var(--color-text-secondary)]">
                    <select
                      value={user.role}
                      onChange={(e) => handleRoleChange(user._id, e.target.value)}
                      className="form-input-default !py-1 !px-2 !text-xs !w-auto disabled:opacity-70 disabled:cursor-not-allowed"
                      disabled={currentUser._id === user._id && user.role === 'admin' && userData.users.filter(u=>u.role === 'admin').length <=1 }
                      title={currentUser._id === user._id && user.role === 'admin' && userData.users.filter(u=>u.role === 'admin').length <=1 ? "Cannot change own role if last admin" : "Change user role"}
                    >
                      <option value="user">User</option>
                      <option value="creator">Creator</option>
                      <option value="admin">Admin</option>
                    </select>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-[var(--color-text-secondary)]">{new Date(user.createdAt).toLocaleDateString()}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <button
                      onClick={() => handleDeleteUser(user._id, user.name || user.email)}
                      className="text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 body-theme-high-contrast:text-red-400 body-theme-high-contrast:hover:text-red-300 hover:underline disabled:opacity-50 disabled:cursor-not-allowed"
                      disabled={currentUser._id === user._id}
                      title={currentUser._id === user._id ? "Cannot delete own account" : "Delete user"}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
       <Pagination 
        currentPage={activeUserFilters.page} 
        totalPages={userData.totalPages} 
        onPageChange={handleUserPageChange} 
        disabled={loading}
      />
       <p className="text-sm text-center text-[var(--color-text-secondary)] mt-2">
        Showing {userData.users.length} of {userData.totalUsers} total users.
      </p>
    </div>
  );
};

export default AdminUserManagementPage;

===== File: /src/pages/creator/CreatorDashboardPage.jsx =====
// src/pages/creator/CreatorDashboardPage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const ContentIcon = () => <span className="text-2xl mr-2">ð</span>;

const CreatorDashboardPage = () => {
  const { user } = useAuth();

  return (
    <div className="container mx-auto p-4 md:p-6">
      <h1>Creator Studio</h1>
      <p className="mb-8 text-lg text-[var(--color-text-secondary)]">
        Welcome, <span className="font-semibold">{user?.name || user?.email || 'Creator'}</span>! Manage your learning content here.
      </p>

      <h2 className="text-2xl font-semibold text-[var(--color-text-primary)] mb-6">Your Tools</h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <Link
          to="/creator/content"
          className="card hover:shadow-lg transition-shadow"
        >
          <div className="flex items-center mb-3">
            <ContentIcon />
            <h3 className="text-xl font-semibold text-[var(--color-text-primary)]">Manage Content</h3>
          </div>
          <p className="text-[var(--color-text-secondary)] text-sm">
            Create new topics, edit existing materials, and view all content.
          </p>
        </Link>
        {/* Add more creator-specific links here if needed */}
      </div>
    </div>
  );
};

export default CreatorDashboardPage;

===== File: /src/reportWebVitals.js =====
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


===== File: /src/services/api.js =====
// src/services/api.js
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL;
console.log("API URL:", API_URL);


const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor to add the token to requests
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default api;

===== File: /src/services/authService.js =====
// src/services/authService.js
import api from './api';

export const loginUser = async (credentials) => {
  const response = await api.post('/auth/login', credentials);
  if (response.data && response.data.token) {
    localStorage.setItem('authToken', response.data.token); // Store token
    // You might want to store user info in context/state management too
  }
  return response.data; // { _id, name, email, role, preferences, token }
};

export const signupUser = async (userData) => {
  const response = await api.post('/auth/signup', userData);
  if (response.data && response.data.token) {
    localStorage.setItem('authToken', response.data.token); // Store token
  }
  return response.data; // { _id, name, email, role, preferences, token }
};

export const logoutUser = () => {
  localStorage.removeItem('authToken');
  // Also clear any user state in your app's state management
};

export const getUserProfile = async () => {
   try {
     const response = await api.get('/auth/me');
     return response.data; // { _id, name, email, preferences, createdAt }
   } catch (error) {
     console.error("Error fetching user profile:", error.response ? error.response.data : error.message);
     if (error.response && error.response.status === 401) {
        logoutUser(); // If unauthorized, log out the user
     }
     throw error; // Re-throw to be handled by the calling component
   }
};

export const updateUserPreferences = async (preferencesData) => {
    try {
        const response = await api.put('/auth/preferences', preferencesData);
        return response.data; // { message, preferences }
    } catch (error) {
        console.error("Error updating preferences:", error.response ? error.response.data : error.message);
        throw error;
    }
};

===== File: /src/services/contentService.js =====
// ===== File: /src/services/contentService.js =====
import api from './api';

export const getContentByTopic = async (topicSlug) => {
  const response = await api.get(`/content/topic/${topicSlug}`);
  // response.data will now include `learningProgress` if user is logged in
  return response.data;
};

// `level` can now be 'eli5', 'easy', 'high_school', 'college_intro', etc.
export const simplifyContent = async (topicSlug, level = 'easy') => {
  const response = await api.post(`/content/simplify`, { topic: topicSlug, level });
  // response.data will include { simplifiedText, level, topicId }
  return response.data;
};

export const generateVisualMap = async (topicSlug, format = 'mermaid') => {
  const response = await api.post(`/content/visual-map`, { topic: topicSlug, format });
  // response.data will include { visualMap, topicId }
  return response.data;
};

export const generateAudioNarration = async (contentId, textToNarrate) => {
  const response = await api.post(`/content/generate-audio`, { contentId, textToNarrate });
  // response.data will include { message, narration, topicId }
  return response.data;
};

export const findVideoExplainers = async (contentId, query) => {
  const response = await api.post(`/content/find-videos`, { contentId, query });
  return response.data; // This is currently a 501 not implemented
};

export const getPublishedContentList = async (params = {}) => {
  const cleanParams = {};
  for (const key in params) {
    if (params[key] !== '' && params[key] !== null && params[key] !== undefined) {
      cleanParams[key] = params[key];
    }
  }
  const response = await api.get('/content', { params: cleanParams });
  return response.data;
};

export const getContentByIdForEditing = async (contentId) => {
  const response = await api.get(`/content/${contentId}`);
  return response.data;
};

export const createContent = async (contentData) => {
  // contentData might now include learningObjectives, keyVocabulary
  const response = await api.post('/content/create', contentData);
  return response.data;
};

export const updateContent = async (contentId, contentData) => {
  // contentData might now include learningObjectives, keyVocabulary
  const response = await api.put(`/content/${contentId}`, contentData);
  return response.data;
};

export const deleteContent = async (contentId) => {
  const response = await api.delete(`/content/${contentId}`);
  return response.data;
};

===== File: /src/services/qaService.js =====
// ===== File: /src/services/qaService.js =====
import api from './api';

export const askQuestionApi = async (question, topic, contentId = null) => {
  const payload = { question, topic };
  if (contentId) {
    payload.contentId = contentId;
  }
  const response = await api.post('/qa/ask', payload);
  return response.data; // { answer }
};

===== File: /src/services/taskService.js =====
// ===== File: /src/services/taskService.js =====
import api from './api';

// Task Management
export const createTaskApi = async (taskData) => {
  const response = await api.post('/tasks', taskData);
  return response.data;
};

export const getUserTasksApi = async (filters = {}) => {
  const response = await api.get('/tasks', { params: filters });
  return response.data;
};

export const getTaskByIdApi = async (taskId) => {
  const response = await api.get(`/tasks/${taskId}`);
  return response.data;
};

export const updateTaskApi = async (taskId, taskData) => {
  const response = await api.put(`/tasks/${taskId}`, taskData);
  return response.data;
};

export const deleteTaskApi = async (taskId) => {
  const response = await api.delete(`/tasks/${taskId}`);
  return response.data;
};

// Learning Progress
export const getLearningProgressForContentApi = async (contentId) => {
    const response = await api.get(`/tasks/progress/content/${contentId}`); // Path matches backend
    return response.data;
};

export const getRecentLearningActivityApi = async (limit = 5) => {
    const response = await api.get(`/tasks/progress/recent`, { params: { limit } });
    return response.data;
};

export const logContentInteractionApi = async (interactionData) => {
    // interactionData = { contentId, mode, eventType: 'start'/'end', durationMs (if end) }
    const response = await api.post(`/tasks/progress/log-interaction`, interactionData);
    return response.data;
};

===== File: /src/services/userService.js =====
// src/services/userService.js
import api from './api';

export const getAllUsersAdmin = async (params = {}) => {
  const cleanParams = {};
  for (const key in params) {
    if (params[key] !== '' && params[key] !== null && params[key] !== undefined) {
      cleanParams[key] = params[key];
    }
  }
  const response = await api.get('/users', { params: cleanParams });
  return response.data;
};

export const getUserByIdAdmin = async (userId) => {
  const response = await api.get(`/users/${userId}`);
  return response.data;
};

export const updateUserRoleAdmin = async (userId, role) => {
  const response = await api.put(`/users/${userId}/role`, { role });
  return response.data;
};

export const deleteUserAdmin = async (userId) => {
  const response = await api.delete(`/users/${userId}`);
  return response.data;
};

===== File: /src/setupTests.js =====
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
