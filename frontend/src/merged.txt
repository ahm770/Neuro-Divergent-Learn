
===== File: /src/App.js =====
// src/App.jsx
import React from 'react';
import { Routes, Route, Link, useNavigate } from 'react-router-dom';
import { useAuth } from './contexts/AuthContext';

// Import Pages (Create these basic files next)
import LoginPage from './pages/LoginPage';
import SignupPage from './pages/SignupPage';
import DashboardPage from './pages/DashboardPage'; // Example protected page
import ContentPage from './pages/ContentPage'; // Example protected page
import HomePage from './pages/HomePage'; // Public landing page

// Import Components
import ProtectedRoute from './components/common/ProtectedRoute';
import Navbar from './components/common/Navbar'; // Create this next

function App() {
  return (
    <div className="min-h-screen flex flex-col">
      <Navbar /> {/* Add Navbar */}
      <main className="flex-grow container mx-auto px-4 py-8">
        <Routes>
          {/* Public Routes */}
          <Route path="/" element={<HomePage />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/signup" element={<SignupPage />} />

          {/* Protected Routes */}
          <Route element={<ProtectedRoute />}>
             {/* Wrap protected routes */}
             <Route path="/dashboard" element={<DashboardPage />} />
             <Route path="/content/:topic" element={<ContentPage />} />
             {/* Add other protected routes here */}
          </Route>

          {/* Catch-all/Not Found Route */}
          <Route path="*" element={<div><h2>404 Not Found</h2><Link to="/">Go Home</Link></div>} />
        </Routes>
      </main>
       <footer className="bg-gray-200 text-center p-4 mt-auto">
         Â© {new Date().getFullYear()} Accessible Learning Portal
       </footer>
    </div>
  );
}

export default App;

===== File: /src/App.test.js =====
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


===== File: /src/components/UserProfile.jsx =====
// src/components/UserProfile.jsx
import React, { useContext, useState } from 'react';
import { UserContext } from '../context/UserContext'; // Adjust path

const UserProfile = () => {
  const { user, updateUserPreferences, loading, error } = useContext(UserContext);
  const [prefs, setPrefs] = useState(user?.preferences || {});
  const [message, setMessage] = useState('');

  useEffect(() => {
    if (user) {
      setPrefs(user.preferences);
    }
  }, [user]);

  if (loading && !user) return <p>Loading profile...</p>;
  if (!user) return <p>Please log in to view your profile.</p>;

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setPrefs(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage('');
    try {
      await updateUserPreferences(prefs);
      setMessage('Preferences updated successfully!');
    } catch (updateError) {
      setMessage(`Error: ${updateError.message || 'Failed to update.'}`);
    }
  };

  return (
    <div>
      <h1>User Profile</h1>
      <p>Email: {user.email}</p>
      <p>Name: {user.name || 'N/A'}</p>
      {error && <p style={{ color: 'red' }}>Context Error: {error}</p>}
      {message && <p style={{ color: message.startsWith('Error:') ? 'red' : 'green' }}>{message}</p>}

      <form onSubmit={handleSubmit}>
        <h2>Preferences</h2>
        <div>
          <label htmlFor="readingLevel">Reading Level:</label>
          <select name="readingLevel" id="readingLevel" value={prefs.readingLevel || 'basic'} onChange={handleChange}>
            <option value="basic">Basic</option>
            <option value="intermediate">Intermediate</option>
            <option value="advanced">Advanced</option>
          </select>
        </div>
        <div>
          <label htmlFor="fontSize">Font Size:</label>
          <select name="fontSize" id="fontSize" value={prefs.fontSize || 'medium'} onChange={handleChange}>
            <option value="small">Small</option>
            <option value="medium">Medium</option>
            <option value="large">Large</option>
            <option value="xlarge">X-Large</option>
          </select>
        </div>
        <div>
          <label htmlFor="theme">Theme:</label>
          <select name="theme" id="theme" value={prefs.theme || 'light'} onChange={handleChange}>
            <option value="light">Light</option>
            <option value="dark">Dark</option>
            <option value="high-contrast">High Contrast</option>
          </select>
        </div>
        <div>
          <label htmlFor="preferredContentMode">Preferred Content Mode:</label>
          <select name="preferredContentMode" id="preferredContentMode" value={prefs.preferredContentMode || 'text'} onChange={handleChange}>
            <option value="text">Text</option>
            <option value="video">Video</option>
            <option value="visual">Visual Map</option>
            <option value="audio">Audio</option>
          </select>
        </div>
        <div>
          <label>
            <input type="checkbox" name="ttsEnabled" checked={prefs.ttsEnabled || false} onChange={handleChange} />
            Enable Text-to-Speech
          </label>
        </div>
        <button type="submit" disabled={loading}>
          {loading ? 'Saving...' : 'Save Preferences'}
        </button>
      </form>
    </div>
  );
};

export default UserProfile;

===== File: /src/components/common/MermaidDiagram.jsx =====
// src/components/MermaidDiagram.jsx
import React, { useEffect, useRef } from 'react';
import mermaid from 'mermaid';

// Initialize Mermaid (only once)
mermaid.initialize({
  startOnLoad: false, // We'll render manually
  theme: 'default', // or 'dark', 'forest', etc.
  // securityLevel: 'loose', // If you have issues with complex diagrams, but be cautious
  // loglevel: 'debug', // For debugging
});

const MermaidDiagram = ({ chartData, diagramId }) => {
  const mermaidRef = useRef(null);
  const uniqueId = diagramId || `mermaid-diagram-${Math.random().toString(36).substr(2, 9)}`;

  useEffect(() => {
    if (mermaidRef.current && chartData) {
      try {
        // mermaid.render needs an ID for the SVG output
        mermaid.render(uniqueId, chartData, (svgCode) => {
          if (mermaidRef.current) {
            mermaidRef.current.innerHTML = svgCode;
          }
        });
      } catch (error) {
        console.error("Mermaid rendering error:", error);
        if (mermaidRef.current) {
          mermaidRef.current.innerHTML = `<pre>Error rendering Mermaid diagram:\n${chartData}\n${error.message}</pre>`;
        }
      }
    } else if (mermaidRef.current) {
        mermaidRef.current.innerHTML = ''; // Clear if no chartData
    }
  }, [chartData, uniqueId]);

  // If chartData is simple text (e.g. text_outline), render as preformatted text
  if (typeof chartData === 'string' && !chartData.trim().startsWith('graph') && !chartData.trim().startsWith('mindmap')) {
    return <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>{chartData}</pre>;
  }

  // If chartData is intended for Mermaid
  return <div ref={mermaidRef} className="mermaid-container"></div>;
};

export default MermaidDiagram;

// Example Usage in a component:
// import MermaidDiagram from './MermaidDiagram';
//
// const MyContentPage = ({ visualMap }) => { // visualMap = { format: 'mermaid', data: 'graph TD; A-->B;' }
//   return (
//     <div>
//       <h2>Visual Map</h2>
//       {visualMap && visualMap.data ? (
//         <MermaidDiagram chartData={visualMap.data} diagramId={`topic-${visualMap.topicId}-map`} />
//       ) : (
//         <p>No visual map available.</p>
//       )}
//     </div>
//   );
// };

===== File: /src/components/common/Navbar.jsx =====
// src/components/common/Navbar.jsx
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const Navbar = () => {
    const { isAuthenticated, user, logout } = useAuth();
    const navigate = useNavigate();

    const handleLogout = () => {
        logout();
        navigate('/login'); // Redirect to login after logout
    };

    return (
        <nav className="bg-primary shadow-md">
            <div className="container mx-auto px-4 py-3 flex justify-between items-center">
                <Link to="/" className="text-xl font-bold text-white hover:text-primary-light transition duration-200">
                    Accessible Learning
                </Link>
                <div className="space-x-4 flex items-center">
                    {isAuthenticated ? (
                        <>
                            <Link to="/dashboard" className="text-white hover:text-primary-light">Dashboard</Link>
                            {/* Add more links as needed */}
                            <span className="text-primary-light">Welcome, {user?.name || user?.email}!</span>
                            <button
                                onClick={handleLogout}
                                className="bg-secondary hover:bg-pink-500 text-white font-semibold py-1 px-3 rounded transition duration-200"
                            >
                                Logout
                            </button>
                        </>
                    ) : (
                        <>
                            <Link to="/login" className="text-white hover:text-primary-light">Login</Link>
                            <Link to="/signup" className="bg-white text-primary font-semibold py-1 px-3 rounded hover:bg-gray-100 transition duration-200">
                                Sign Up
                            </Link>
                        </>
                    )}
                </div>
            </div>
        </nav>
    );
};

export default Navbar;

===== File: /src/components/common/ProtectedRoute.jsx =====
// src/components/common/ProtectedRoute.jsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    // Optional: Add a loading spinner component here
    return <div>Loading authentication...</div>;
  }

  if (!isAuthenticated) {
    // Redirect them to the /login page, but save the current location they were
    // trying to go to when they were redirected. This allows us to send them
    // along to that page after they login, which is a nicer user experience
    // than dropping them off on the home page.
    return <Navigate to="/login" replace />;
  }

  // If authenticated, render the child components (or Outlet for nested routes)
  return children ? children : <Outlet />;
};

export default ProtectedRoute;

===== File: /src/context/UserContext.js =====
// src/context/UserContext.js
import React, { createContext, useState, useEffect, useCallback } from 'react';
import { getUserProfile, updateUserPreferences as apiUpdateUserPreferences, logoutUser as apiLogoutUser } from '../services/authService'; // Adjust path

export const UserContext = createContext(null);

export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchUser = useCallback(async () => {
    const token = localStorage.getItem('authToken');
    if (token) {
      setLoading(true);
      try {
        const userData = await getUserProfile();
        setUser(userData);
        setError(null);
      } catch (err) {
        console.error("Failed to fetch user profile", err);
        setUser(null); // Clear user if token is invalid or error occurs
        setError(err.response?.data?.error || 'Failed to load user data.');
        localStorage.removeItem('authToken'); // Clear invalid token
      } finally {
        setLoading(false);
      }
    } else {
      setLoading(false); // No token, not loading
      setUser(null);
    }
  }, []);

  useEffect(() => {
    fetchUser();
  }, [fetchUser]);

  const login = (userData) => {
    // authToken is set by authService.loginUser
    setUser(userData); // userData should include preferences from login response
    setError(null);
  };

  const logout = () => {
    apiLogoutUser(); // Clears localStorage token
    setUser(null);
    setError(null);
    // Potentially redirect to login page
  };

  const updateUserPreferences = async (preferencesData) => {
    if (!user) throw new Error("User not logged in");
    setLoading(true);
    try {
      const { preferences } = await apiUpdateUserPreferences(preferencesData);
      setUser(prevUser => ({ ...prevUser, preferences }));
      setError(null);
      return preferences;
    } catch (err) {
      console.error("Failed to update preferences", err);
      setError(err.response?.data?.error || 'Failed to update preferences.');
      throw err;
    } finally {
      setLoading(false);
    }
  };


  return (
    <UserContext.Provider value={{ user, setUser, login, logout, loading, error, fetchUser, updateUserPreferences }}>
      {children}
    </UserContext.Provider>
  );
};

===== File: /src/contexts/AuthContext.jsx =====
// src/contexts/AuthContext.jsx
import React, { createContext, useState, useEffect, useContext } from 'react';
import { loginUser, signupUser } from '../services/authService';
import api from '../services/api'; // Import api to potentially clear defaults on logout

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem('authToken') || null);
  const [loading, setLoading] = useState(true); // Start loading true to check token
  const [error, setError] = useState(null);

  useEffect(() => {
    const checkUser = async () => {
      const storedToken = localStorage.getItem('authToken');
      if (storedToken) {
        setToken(storedToken);
        // Optionally: Verify token with backend here
        // For simplicity now, we assume token means logged in
        // We might need to store basic user info (like name/email) in localStorage too
        // Or fetch it using getUserProfile() if implementing that route
        const storedUser = localStorage.getItem('authUser');
         if (storedUser) {
            setUser(JSON.parse(storedUser));
         } else {
             // If only token is stored, maybe try fetching user profile
             // console.log("Token found, user data missing - consider fetching profile");
         }
      }
      setLoading(false);
    };
    checkUser();
  }, []);

  const login = async (credentials) => {
    setLoading(true);
    setError(null);
    try {
      const data = await loginUser(credentials);
      localStorage.setItem('authToken', data.token);
      localStorage.setItem('authUser', JSON.stringify({ _id: data._id, name: data.name, email: data.email })); // Store user info
      setToken(data.token);
      setUser({ _id: data._id, name: data.name, email: data.email });
      setLoading(false);
      return true; // Indicate success
    } catch (err) {
      console.error("Login failed:", err.response?.data?.error || err.message);
      setError(err.response?.data?.error || 'Login failed');
      setLoading(false);
      return false; // Indicate failure
    }
  };

  const signup = async (userData) => {
    setLoading(true);
    setError(null);
    try {
      const data = await signupUser(userData);
      localStorage.setItem('authToken', data.token);
       localStorage.setItem('authUser', JSON.stringify({ _id: data._id, name: data.name, email: data.email }));
      setToken(data.token);
      setUser({ _id: data._id, name: data.name, email: data.email });
      setLoading(false);
      return true; // Indicate success
    } catch (err) {
      console.error("Signup failed:", err.response?.data?.error || err.message);
      setError(err.response?.data?.error || 'Signup failed');
      setLoading(false);
      return false; // Indicate failure
    }
  };

  const logout = () => {
    localStorage.removeItem('authToken');
     localStorage.removeItem('authUser');
    setToken(null);
    setUser(null);
    // Optionally clear Axios default headers if needed, though interceptor handles it
    // delete api.defaults.headers.common['Authorization'];
  };

  const isAuthenticated = !!token && !!user;

  return (
    <AuthContext.Provider value={{ user, token, isAuthenticated, loading, error, login, signup, logout, setError }}>
      {children}
    </AuthContext.Provider>
  );
};

// Custom Hook for easy access
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

===== File: /src/index.js =====
// src/index.js or src/App.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { UserProvider } from './context/UserContext'; // Adjust path

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <UserProvider>
      <App />
    </UserProvider>
  </React.StrictMode>
);

===== File: /src/pages/ContentPage.jsx =====
import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
// import { getContentByTopic, simplifyContent } from '../services/contentService'; // We'll create this service next
import { useAuth } from '../contexts/AuthContext';
import api from '../services/api'; // Use api directly for now

// Placeholder components - create these later
const LoadingSpinner = () => <div className="text-center p-4">Loading...</div>;
const ErrorMessage = ({ message }) => <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">{message}</div>;


const ContentPage = () => {
  const { topic } = useParams(); // Get topic from URL
  const { token } = useAuth(); // Needed for authenticated requests
  const [content, setContent] = useState(null);
  const [simplifiedText, setSimplifiedText] = useState('');
  const [currentMode, setCurrentMode] = useState('original'); // 'original', 'simplified', 'visual', 'audio'
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [simplifying, setSimplifying] = useState(false);

  useEffect(() => {
    const fetchContent = async () => {
      if (!topic || !token) return; // Don't fetch if no topic or token
      setLoading(true);
      setError(null);
      setSimplifiedText(''); // Reset simplified text on topic change
      setCurrentMode('original'); // Reset mode

      try {
        // --- Replace with contentService.getContentByTopic(topic) later ---
        const response = await api.get(`/content/${topic}`);
        setContent(response.data);
         // Check if an 'easy' simplified version exists and load it initially?
         const easyVersion = response.data.simplifiedVersions?.find(v => v.level === 'easy');
         if (easyVersion) {
            setSimplifiedText(easyVersion.text);
         }
      } catch (err) {
        console.error("Failed to fetch content:", err);
         setError(err.response?.data?.message || `Content for "${topic}" not found or failed to load.`);
         setContent(null); // Ensure no stale content is shown
      } finally {
        setLoading(false);
      }
    };

    fetchContent();
  }, [topic, token]); // Re-fetch if topic or token changes


  const handleSimplify = async (level = 'easy') => {
    if (!content || simplifying) return;
    setSimplifying(true);
    setError(null);

    try {
         // Check cache first
         const cachedVersion = content.simplifiedVersions?.find(v => v.level === level);
         if (cachedVersion) {
             setSimplifiedText(cachedVersion.text);
             setCurrentMode('simplified'); // Or set based on level?
             setSimplifying(false);
             return;
         }

        // --- Replace with contentService.simplifyContent(topic, level) later ---
        const response = await api.post(`/content/simplify`, { topic: content.topic, level });
        setSimplifiedText(response.data.simplifiedText);
        setCurrentMode('simplified');

        // Optimistically update local state (or refetch content to get updated versions array)
        if (content) {
            setContent(prev => ({
                ...prev,
                simplifiedVersions: [...(prev.simplifiedVersions || []), {level, text: response.data.simplifiedText}]
            }));
        }

    } catch (err) {
         console.error("Failed to simplify content:", err);
         setError(err.response?.data?.error || 'Failed to simplify content.');
    } finally {
         setSimplifying(false);
    }
  };

  // --- Placeholder functions for other modes ---
  const handleVisualMap = () => { alert('Visual Map mode not implemented yet.'); setCurrentMode('visual'); };
  const handleAudio = () => { alert('Audio mode not implemented yet.'); setCurrentMode('audio'); };


  if (loading) return <LoadingSpinner />;

  return (
    <div className="container mx-auto p-4">
      <Link to="/dashboard" className="text-blue-600 hover:underline mb-4 inline-block">â Back to Dashboard</Link>

      {error && !content && <ErrorMessage message={error} />} {/* Show critical error if content failed */}

      {content && (
        <div>
           {error && <ErrorMessage message={error} />} {/* Show non-critical errors (e.g., simplify failed) */}

          <h1 className="text-3xl font-bold mb-4 capitalize">{content.topic.replace('-', ' ')}</h1>

          {/* --- Content Mode Switching UI --- */}
          <div className="mb-6 border-b pb-3 flex flex-wrap gap-2">
              <button onClick={() => setCurrentMode('original')} className={`px-3 py-1 rounded ${currentMode === 'original' ? 'bg-primary text-white' : 'bg-gray-200 hover:bg-gray-300'}`}>Original Text</button>
              <button onClick={() => simplifiedText ? setCurrentMode('simplified') : handleSimplify()} disabled={simplifying} className={`px-3 py-1 rounded ${currentMode === 'simplified' ? 'bg-primary text-white' : 'bg-gray-200 hover:bg-gray-300'} disabled:opacity-50`}>
                 {simplifying ? 'Simplifying...' : (simplifiedText ? 'Simplified' : 'Simplify Text')}
              </button>
              {/* Add buttons for other levels if needed */}
              {/* <button onClick={() => handleSimplify('moderate')} disabled={simplifying} className="...">Simplify (Moderate)</button> */}
              <button onClick={handleVisualMap} className={`px-3 py-1 rounded ${currentMode === 'visual' ? 'bg-primary text-white' : 'bg-gray-200 hover:bg-gray-300'}`}>Visual Map</button>
              <button onClick={handleAudio} className={`px-3 py-1 rounded ${currentMode === 'audio' ? 'bg-primary text-white' : 'bg-gray-200 hover:bg-gray-300'}`}>Audio</button>
          </div>

          {/* --- Content Display Area --- */}
          <div className="prose max-w-none p-4 border rounded bg-white shadow"> {/* Using prose for nice text styling */}
            {currentMode === 'original' && <div dangerouslySetInnerHTML={{ __html: content.originalText.replace(/\n/g, '<br />') }} />} {/* Basic display */}
            {currentMode === 'simplified' && <div>{simplifiedText || 'Click "Simplify Text" to generate.'}</div>}
            {currentMode === 'visual' && <div>Visual Map Area - To be implemented.</div>}
            {currentMode === 'audio' && <div>Audio Player Area - To be implemented.</div>}
          </div>

           {/* TODO: Add Interactive Companion (Chatbot) Component Here */}

        </div>
      )}
    </div>
  );
};

export default ContentPage;

===== File: /src/pages/DashboardPage.jsx =====
import React from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Link } from 'react-router-dom';

const DashboardPage = () => {
  const { user } = useAuth();

  // Example list of topics - you'd likely fetch this later
  const topics = ['photosynthesis', 'gravity', 'react-basics', 'python-loops'];

  return (
    <div>
      <h1 className="text-3xl font-bold mb-4 text-primary">Dashboard</h1>
      <p className="mb-6">Welcome back, {user?.name || user?.email}!</p>

      <h2 className="text-2xl font-semibold mb-3">Available Topics:</h2>
      <ul className="list-disc list-inside space-y-2">
         {topics.map(topic => (
             <li key={topic}>
                 <Link
                     to={`/content/${topic}`}
                     className="text-blue-600 hover:text-blue-800 hover:underline capitalize" // Capitalize for display
                 >
                     {topic.replace('-', ' ')} {/* Replace hyphens for readability */}
                 </Link>
             </li>
         ))}
      </ul>

      {/* Add more dashboard content here later */}
    </div>
  );
};

export default DashboardPage;

===== File: /src/pages/HomePage.jsx =====
import React from 'react';
import { Link } from 'react-router-dom';

const HomePage = () => {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-4 text-primary">Welcome to the Accessible Learning Portal</h1>
      <p className="mb-4">Your journey to personalized learning starts here.</p>
      <Link to="/signup" className="bg-secondary hover:bg-pink-500 text-white font-semibold py-2 px-4 rounded transition duration-200 mr-2">
        Get Started (Sign Up)
      </Link>
      <Link to="/login" className="text-primary hover:underline">
        Already have an account? Login
      </Link>
    </div>
  );
};

export default HomePage;

===== File: /src/pages/LoginPage.jsx =====
// src/pages/LoginPage.jsx (Example Structure)
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate, Link } from 'react-router-dom';

const LoginPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const { login, loading, error, setError } = useAuth(); // Get setError
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null); // Clear previous errors
        const success = await login({ email, password });
        if (success) {
            navigate('/dashboard'); // Redirect on successful login
        }
    };

    return (
        <div className="max-w-md mx-auto mt-10 p-8 border rounded shadow-lg bg-white">
            <h2 className="text-2xl font-bold mb-6 text-center text-primary">Login</h2>
            <form onSubmit={handleSubmit}>
                {error && <p className="mb-4 text-red-500 bg-red-100 p-2 rounded text-sm">{error}</p>}
                <div className="mb-4">
                    <label className="block text-gray-700 mb-2" htmlFor="email">Email</label>
                    <input
                        type="email"
                        id="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary-light"
                        required
                    />
                </div>
                <div className="mb-6">
                    <label className="block text-gray-700 mb-2" htmlFor="password">Password</label>
                    <input
                        type="password"
                        id="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary-light"
                        required
                    />
                </div>
                <button
                    type="submit"
                    disabled={loading}
                    className="w-full bg-primary hover:bg-primary-dark text-white font-bold py-2 px-4 rounded transition duration-200 disabled:opacity-50"
                >
                    {loading ? 'Logging in...' : 'Login'}
                </button>
            </form>
             <p className="mt-4 text-center text-sm text-gray-600">
                Don't have an account?{' '}
                <Link to="/signup" className="text-primary hover:underline">
                    Sign up here
                </Link>
            </p>
        </div>
    );
};

export default LoginPage;

===== File: /src/pages/SignupPage.jsx =====
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate, Link } from 'react-router-dom';

const SignupPage = () => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const { signup, loading, error, setError } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null); // Clear previous errors
        const success = await signup({ name, email, password });
        if (success) {
            navigate('/dashboard'); // Redirect on successful signup
        }
    };

    return (
        <div className="max-w-md mx-auto mt-10 p-8 border rounded shadow-lg bg-white">
            <h2 className="text-2xl font-bold mb-6 text-center text-primary">Create Account</h2>
            <form onSubmit={handleSubmit}>
                 {error && <p className="mb-4 text-red-500 bg-red-100 p-2 rounded text-sm">{error}</p>}
                <div className="mb-4">
                     <label className="block text-gray-700 mb-2" htmlFor="name">Name (Optional)</label>
                     <input
                         type="text"
                         id="name"
                         value={name}
                         onChange={(e) => setName(e.target.value)}
                         className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary-light"
                     />
                 </div>
                <div className="mb-4">
                    <label className="block text-gray-700 mb-2" htmlFor="email">Email</label>
                    <input
                        type="email"
                        id="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary-light"
                        required
                    />
                </div>
                <div className="mb-6">
                    <label className="block text-gray-700 mb-2" htmlFor="password">Password</label>
                    <input
                        type="password"
                        id="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary-light"
                        required
                        minLength="6" // Add basic validation example
                    />
                     <p className="text-xs text-gray-500 mt-1">Minimum 6 characters</p>
                </div>
                <button
                    type="submit"
                    disabled={loading}
                    className="w-full bg-primary hover:bg-primary-dark text-white font-bold py-2 px-4 rounded transition duration-200 disabled:opacity-50"
                >
                    {loading ? 'Creating Account...' : 'Sign Up'}
                </button>
            </form>
            <p className="mt-4 text-center text-sm text-gray-600">
                Already have an account?{' '}
                <Link to="/login" className="text-primary hover:underline">
                    Login here
                </Link>
            </p>
        </div>
    );
};

export default SignupPage;

===== File: /src/reportWebVitals.js =====
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


===== File: /src/services/api.js =====
// src/services/api.js
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL;
console.log("API URL:", API_URL);


const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor to add the token to requests
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default api;

===== File: /src/services/authService.js =====
// src/services/authService.js
import api from './api';

export const loginUser = async (credentials) => {
  const response = await api.post('/auth/login', credentials);
  if (response.data && response.data.token) {
    localStorage.setItem('authToken', response.data.token); // Store token
    // You might want to store user info in context/state management too
  }
  return response.data; // { _id, name, email, preferences, token }
};

export const signupUser = async (userData) => {
  const response = await api.post('/auth/signup', userData);
  if (response.data && response.data.token) {
    localStorage.setItem('authToken', response.data.token); // Store token
  }
  return response.data; // { _id, name, email, preferences, token }
};

export const logoutUser = () => {
  localStorage.removeItem('authToken');
  // Also clear any user state in your app's state management
};

export const getUserProfile = async () => {
   try {
     const response = await api.get('/auth/me');
     return response.data; // { _id, name, email, preferences, createdAt }
   } catch (error) {
     console.error("Error fetching user profile:", error.response ? error.response.data : error.message);
     if (error.response && error.response.status === 401) {
        logoutUser(); // If unauthorized, log out the user
     }
     throw error; // Re-throw to be handled by the calling component
   }
};

export const updateUserPreferences = async (preferencesData) => {
    try {
        const response = await api.put('/auth/preferences', preferencesData);
        return response.data; // { message, preferences }
    } catch (error) {
        console.error("Error updating preferences:", error.response ? error.response.data : error.message);
        throw error;
    }
};

===== File: /src/setupTests.js =====
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
