
===== File: /src/App.js =====
// src/App.jsx
import React from 'react';
import { Routes, Route, Link, useNavigate } from 'react-router-dom';
 

// Import Pages (Create these basic files next)
import LoginPage from './pages/LoginPage';
import SignupPage from './pages/SignupPage';
import DashboardPage from './pages/DashboardPage'; // Example protected page
import ContentPage from './pages/ContentPage'; // Example protected page
import HomePage from './pages/HomePage'; // Public landing page
import AdminRoute from './components/common/AdminRoute';
import AdminDashboardPage from './pages/admin/AdminDashboardPage'; // Create this
import AdminContentListPage from './pages/admin/AdminContentListPage'; // Create this
import AdminCreateContentPage from './pages/admin/AdminCreateContentPage'; // Create this
import AdminEditContentPage from './pages/admin/AdminEditContentPage'; // Create this

// Import Components
import ProtectedRoute from './components/common/ProtectedRoute';
import Navbar from './components/common/Navbar'; // Create this next

function App() {
  return (
    <div className="min-h-screen flex flex-col">
      <Navbar /> {/* Add Navbar */}
      <main className="flex-grow container mx-auto px-4 py-8">
        <Routes>
          {/* Public Routes */}
          <Route path="/" element={<HomePage />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/signup" element={<SignupPage />} />

          {/* Protected Routes */}
          <Route element={<ProtectedRoute />}>
             {/* Wrap protected routes */}
             <Route path="/dashboard" element={<DashboardPage />} />
             <Route path="/content/:topic" element={<ContentPage />} />
             {/* Add other protected routes here */}
          </Route>
          <Route element={<AdminRoute />}>
  <Route path="/admin" element={<AdminDashboardPage />} />
  <Route path="/admin/content" element={<AdminContentListPage />} />
  <Route path="/admin/content/create" element={<AdminCreateContentPage />} />
  <Route path="/admin/content/edit/:contentId" element={<AdminEditContentPage />} />
  {/* Add more admin routes as needed */}
</Route>

          {/* Catch-all/Not Found Route */}
          <Route path="*" element={<div><h2>404 Not Found</h2><Link to="/">Go Home</Link></div>} />
        </Routes>
      </main>
       <footer className="bg-gray-200 text-center p-4 mt-auto">
         Â© {new Date().getFullYear()} Accessible Learning Portal
       </footer>
    </div>
  );
}

export default App;

===== File: /src/App.test.js =====
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


===== File: /src/components/UserProfile.jsx =====
// src/components/UserProfile.jsx
import React, { useState, useEffect } from 'react'; // Added useEffect
import { useAuth } from '../contexts/AuthContext'; // Changed to useAuth

const UserProfile = () => {
  // Destructure what you need from the unified AuthContext
  const { user, updateUserPreferences, loading: authLoading, error: authError } = useAuth();
  const [prefs, setPrefs] = useState({});
  const [message, setMessage] = useState('');
  const [isSaving, setIsSaving] = useState(false); // Local loading state for the save button

  useEffect(() => {
    // Initialize prefs from user object when user data is available or changes
    if (user && user.preferences) {
      setPrefs(user.preferences);
    } else {
      // Set default or empty if no user/preferences (e.g., during initial load)
      setPrefs({
        readingLevel: 'basic',
        fontSize: 'medium',
        theme: 'light',
        preferredContentMode: 'text',
        ttsEnabled: false,
      });
    }
  }, [user]); // Re-run if user object changes

  if (authLoading && !user) return <p>Loading profile...</p>; // Show loading if user is not yet fetched

  if (!user) return (
    <div>
        <p>Please log in to view or update your profile and preferences.</p>
        {authError && <p style={{ color: 'red' }}>Error: {authError}</p>}
    </div>
  );


  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setPrefs(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage('');
    setIsSaving(true);
    try {
      await updateUserPreferences(prefs);
      setMessage('Preferences updated successfully!');
    } catch (updateError) {
      setMessage(`Error: ${updateError.message || 'Failed to update preferences.'}`);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="max-w-lg mx-auto p-6 bg-white shadow-md rounded-lg">
      <h1 className="text-2xl font-semibold text-primary mb-6">User Profile & Preferences</h1>
      <div className="mb-4">
        <p><span className="font-semibold">Email:</span> {user.email}</p>
        <p><span className="font-semibold">Name:</span> {user.name || 'N/A'}</p>
      </div>

      {authError && !message && <p className="text-sm text-red-600 bg-red-100 p-2 rounded mb-4">Context Error: {authError}</p>}
      {message && <p className={`text-sm p-2 rounded mb-4 ${message.startsWith('Error:') ? 'text-red-600 bg-red-100' : 'text-green-600 bg-green-100'}`}>{message}</p>}

      <form onSubmit={handleSubmit} className="space-y-4">
        <h2 className="text-xl font-medium text-gray-700 mb-3">Your Preferences</h2>
        <div>
          <label htmlFor="readingLevel" className="block text-sm font-medium text-gray-700">Reading Level:</label>
          <select name="readingLevel" id="readingLevel" value={prefs.readingLevel || 'basic'} onChange={handleChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md">
            <option value="basic">Basic</option>
            <option value="intermediate">Intermediate</option>
            <option value="advanced">Advanced</option>
          </select>
        </div>
        <div>
          <label htmlFor="fontSize" className="block text-sm font-medium text-gray-700">Font Size:</label>
          <select name="fontSize" id="fontSize" value={prefs.fontSize || 'medium'} onChange={handleChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md">
            <option value="small">Small</option>
            <option value="medium">Medium</option>
            <option value="large">Large</option>
            <option value="xlarge">X-Large</option>
          </select>
        </div>
        <div>
          <label htmlFor="theme" className="block text-sm font-medium text-gray-700">Theme:</label>
          <select name="theme" id="theme" value={prefs.theme || 'light'} onChange={handleChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md">
            <option value="light">Light</option>
            <option value="dark">Dark</option>
            <option value="high-contrast">High Contrast</option>
          </select>
        </div>
        <div>
          <label htmlFor="preferredContentMode" className="block text-sm font-medium text-gray-700">Preferred Content Mode:</label>
          <select name="preferredContentMode" id="preferredContentMode" value={prefs.preferredContentMode || 'text'} onChange={handleChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md">
            <option value="text">Text</option>
            <option value="video">Video</option>
            <option value="visual">Visual Map</option>
            <option value="audio">Audio</option>
          </select>
        </div>
        <div className="flex items-center">
          <input type="checkbox" name="ttsEnabled" id="ttsEnabled" checked={prefs.ttsEnabled || false} onChange={handleChange} className="h-4 w-4 text-primary border-gray-300 rounded focus:ring-primary" />
          <label htmlFor="ttsEnabled" className="ml-2 block text-sm text-gray-900">
            Enable Text-to-Speech
          </label>
        </div>
        <button
          type="submit"
          disabled={isSaving || authLoading} // Disable if saving or context is busy with auth stuff
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-dark disabled:opacity-50"
        >
          {isSaving ? 'Saving...' : 'Save Preferences'}
        </button>
      </form>
    </div>
  );
};

export default UserProfile;

===== File: /src/components/common/AdminRoute.jsx =====
// src/components/common/AdminRoute.jsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const AdminRoute = ({ children }) => {
  const { isAuthenticated, user, loading } = useAuth();

  if (loading) {
    return <div>Loading authentication...</div>;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  if (user?.role !== 'admin') {
    // Optional: Redirect to a specific "Access Denied" page or just dashboard
    return <Navigate to="/dashboard" replace />;
    // Or: return <div><h2>Access Denied</h2><p>You do not have permission to view this page.</p></div>;
  }

  return children ? children : <Outlet />;
};

export default AdminRoute;

===== File: /src/components/common/MermaidDiagram.jsx =====
// src/components/MermaidDiagram.jsx
import React, { useEffect, useRef } from 'react';
import mermaid from 'mermaid';

// Initialize Mermaid (only once)
mermaid.initialize({
  startOnLoad: false, // We'll render manually
  theme: 'default', // or 'dark', 'forest', etc.
  // securityLevel: 'loose', // If you have issues with complex diagrams, but be cautious
  // loglevel: 'debug', // For debugging
});

const MermaidDiagram = ({ chartData, diagramId }) => {
  const mermaidRef = useRef(null);
  const uniqueId = diagramId || `mermaid-diagram-${Math.random().toString(36).substr(2, 9)}`;

  useEffect(() => {
    if (mermaidRef.current && chartData) {
      try {
        // mermaid.render needs an ID for the SVG output
        mermaid.render(uniqueId, chartData, (svgCode) => {
          if (mermaidRef.current) {
            mermaidRef.current.innerHTML = svgCode;
          }
        });
      } catch (error) {
        console.error("Mermaid rendering error:", error);
        if (mermaidRef.current) {
          mermaidRef.current.innerHTML = `<pre>Error rendering Mermaid diagram:\n${chartData}\n${error.message}</pre>`;
        }
      }
    } else if (mermaidRef.current) {
        mermaidRef.current.innerHTML = ''; // Clear if no chartData
    }
  }, [chartData, uniqueId]);

  // If chartData is simple text (e.g. text_outline), render as preformatted text
  if (typeof chartData === 'string' && !chartData.trim().startsWith('graph') && !chartData.trim().startsWith('mindmap')) {
    return <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>{chartData}</pre>;
  }

  // If chartData is intended for Mermaid
  return <div ref={mermaidRef} className="mermaid-container"></div>;
};

export default MermaidDiagram;

// Example Usage in a component:
// import MermaidDiagram from './MermaidDiagram';
//
// const MyContentPage = ({ visualMap }) => { // visualMap = { format: 'mermaid', data: 'graph TD; A-->B;' }
//   return (
//     <div>
//       <h2>Visual Map</h2>
//       {visualMap && visualMap.data ? (
//         <MermaidDiagram chartData={visualMap.data} diagramId={`topic-${visualMap.topicId}-map`} />
//       ) : (
//         <p>No visual map available.</p>
//       )}
//     </div>
//   );
// };

===== File: /src/components/common/Navbar.jsx =====
// src/components/common/Navbar.jsx
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const Navbar = () => {
    const { isAuthenticated, user, logout } = useAuth();
    console.log("user::", user)
    const navigate = useNavigate();

    const handleLogout = () => {
        logout();
        navigate('/login'); // Redirect to login after logout
    };

    return (
        <nav className="bg-primary shadow-md">
            <div className="container mx-auto px-4 py-3 flex justify-between items-center">
                <Link to="/" className="text-xl font-bold text-white hover:text-primary-light transition duration-200">
                    Accessible Learning
                </Link>
                <div className="space-x-4 flex items-center">
                {isAuthenticated && user?.role === 'admin' && (
  <Link to="/admin" className="text-white hover:text-primary-light">Admin</Link>
)}
                    {isAuthenticated ? (
                        <>
                            <Link to="/dashboard" className="text-white hover:text-primary-light">Dashboard</Link>
                            {/* Add more links as needed */}
                            <span className="text-primary-light">Welcome, {user?.name || user?.email}!</span>
                            <button
                                onClick={handleLogout}
                                className="bg-secondary hover:bg-pink-500 text-white font-semibold py-1 px-3 rounded transition duration-200"
                            >
                                Logout
                            </button>
                        </>
                    ) : (
                        <>
                            <Link to="/login" className="text-white hover:text-primary-light">Login</Link>
                            <Link to="/signup" className="bg-white text-primary font-semibold py-1 px-3 rounded hover:bg-gray-100 transition duration-200">
                                Sign Up
                            </Link>
                        </>
                    )}
                </div>
            </div>
        </nav>
    );
};

export default Navbar;

===== File: /src/components/common/ProtectedRoute.jsx =====
// src/components/common/ProtectedRoute.jsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    // Optional: Add a loading spinner component here
    return <div>Loading authentication...</div>;
  }

  if (!isAuthenticated) {
    // Redirect them to the /login page, but save the current location they were
    // trying to go to when they were redirected. This allows us to send them
    // along to that page after they login, which is a nicer user experience
    // than dropping them off on the home page.
    return <Navigate to="/login" replace />;
  }

  // If authenticated, render the child components (or Outlet for nested routes)
  return children ? children : <Outlet />;
};

export default ProtectedRoute;

===== File: /src/contexts/AuthContext.jsx =====
// src/contexts/AuthContext.jsx (Unified)
import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';
import {
  loginUser as apiLoginUser,
  signupUser as apiSignupUser,
  getUserProfile as apiGetUserProfile,
  updateUserPreferences as apiUpdateUserPreferences,
  logoutUser as apiLogoutUser // This one just clears localStorage in authService
} from '../services/authService';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null); // Will hold the FULL user object
  const [token, setToken] = useState(localStorage.getItem('authToken') || null);
  const [loading, setLoading] = useState(true); // For initial load, login, signup, etc.
  const [error, setError] = useState(null);

  // Effect to load user on initial mount if token exists
  useEffect(() => {
    const loadUserOnMount = async () => {
      const storedToken = localStorage.getItem('authToken');
      if (storedToken) {
        setToken(storedToken); // Make sure token state is set
        setLoading(true);
        try {
          const userData = await apiGetUserProfile(); // Fetches full user data with preferences
          setUser(userData);
          setError(null);
        } catch (err) {
          console.error("AuthContext: Failed to fetch user profile on mount", err);
          // If token is invalid (e.g., 401 error), logout
          if (err.response && err.response.status === 401) {
            localStorage.removeItem('authToken');
            localStorage.removeItem('authUser'); // If you were storing this
            setToken(null);
            setUser(null);
          }
          setError(err.response?.data?.error || 'Failed to load user data.');
        } finally {
          setLoading(false);
        }
      } else {
        setLoading(false); // No token, not loading user
      }
    };
    loadUserOnMount();
  }, []); // Empty dependency array: run once on mount

  const login = async (credentials) => {
    setLoading(true);
    setError(null);
    try {
      const data = await apiLoginUser(credentials); // API returns { _id, name, email, preferences, token }
      localStorage.setItem('authToken', data.token);
      // No need to store 'authUser' separately in localStorage if `user` state has it all
      localStorage.removeItem('authUser'); // Clean up old storage if any
      setToken(data.token);
      setUser({ // Set the full user object
        _id: data._id,
        name: data.name,
        email: data.email,
        role: data.role,
        preferences: data.preferences,
        createdAt: data.createdAt // If backend sends it
      });
      setLoading(false);
      return true;
    } catch (err) {
      console.error("AuthContext: Login failed", err);
      setError(err.response?.data?.error || 'Login failed');
      setLoading(false);
      return false;
    }
  };

  const signup = async (userData) => {
    setLoading(true);
    setError(null);
    try {
      const data = await apiSignupUser(userData); // API returns { _id, name, email, preferences, token }
      localStorage.setItem('authToken', data.token);
      localStorage.removeItem('authUser'); // Clean up old storage if any
      setToken(data.token);
      setUser({ // Set the full user object
        _id: data._id,
        name: data.name,
        email: data.email,
        role: data.role,
        preferences: data.preferences,
        createdAt: data.createdAt // If backend sends it
      });
      setLoading(false);
      return true;
    } catch (err) {
      console.error("AuthContext: Signup failed", err);
      setError(err.response?.data?.error || 'Signup failed');
      setLoading(false);
      return false;
    }
  };

  const logout = () => {
    apiLogoutUser(); // This function in authService clears localStorage
    setToken(null);
    setUser(null);
    setError(null);
    // No need to interact with `api.defaults.headers.common['Authorization']`
    // as the interceptor in `services/api.js` handles token presence.
  };

  const updateUserPreferences = async (preferencesData) => {
    if (!user) {
      const err = new Error("User not logged in to update preferences");
      setError(err.message);
      throw err;
    }
    setLoading(true); // Can use a more specific loading state if preferred for UX
    setError(null);
    try {
      const { preferences: updatedPreferences } = await apiUpdateUserPreferences(preferencesData);
      setUser(prevUser => ({ ...prevUser, preferences: updatedPreferences }));
      setLoading(false);
      return updatedPreferences;
    } catch (err) {
      console.error("AuthContext: Failed to update preferences", err);
      setError(err.response?.data?.error || 'Failed to update preferences.');
      setLoading(false);
      throw err;
    }
  };

  const isAuthenticated = !!token && !!user;

  return (
    <AuthContext.Provider value={{
      user,
      token,
      isAuthenticated,
      loading,
      error,
      login,
      signup,
      logout,
      updateUserPreferences,
      setError // Good to expose setError to clear it manually if needed
    }}>
      {children}
    </AuthContext.Provider>
  );
};

// Custom Hook for easy access
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

===== File: /src/index.js =====
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { AuthProvider } from './contexts/AuthContext'; // Only this provider
import { BrowserRouter } from 'react-router-dom';
import './index.css'; // Assuming you have a global CSS file

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <App />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);

===== File: /src/pages/ContentPage.jsx =====
// src/pages/ContentPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import {
  getContentByTopic,
  simplifyContent,
  generateVisualMap, // Assuming this will be implemented in contentService
  generateAudioNarration // Assuming this will be implemented in contentService
} from '../services/contentService';
import MermaidDiagram from '../components/common/MermaidDiagram'; // Adjust path if needed

// Placeholder components - create these properly
const LoadingSpinner = ({ text = "Loading..." }) => <div className="text-center p-10"><div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-2"></div><p>{text}</p></div>;
const ErrorMessage = ({ message }) => <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 my-4 rounded" role="alert"><p className="font-bold">Error</p><p>{message}</p></div>;
const InfoMessage = ({ message }) => <div className="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 my-4 rounded" role="alert"><p>{message}</p></div>;


const ContentPage = () => {
  const { topic } = useParams();
  const { user } = useAuth(); // Get user for preferences

  const [content, setContent] = useState(null);
  const [currentMode, setCurrentMode] = useState('original'); // 'original', 'simplified', 'visual', 'audio'
  const [displayedText, setDisplayedText] = useState(''); // For original or simplified text

  // Mode-specific states
  const [visualMapData, setVisualMapData] = useState(null); // { format: 'mermaid', data: '...' }
  const [audioUrl, setAudioUrl] = useState(null);

  // Loading/Error states
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isProcessingMode, setIsProcessingMode] = useState(false); // For AI generation actions

  const fetchContentData = useCallback(async () => {
    if (!topic) return;
    setLoading(true);
    setError(null);
    setContent(null); // Reset content on new topic load
    setDisplayedText('');
    setVisualMapData(null);
    setAudioUrl(null);
    setCurrentMode('original'); // Default to original

    try {
      const data = await getContentByTopic(topic);
      setContent(data);
      setDisplayedText(data.originalText); // Display original text by default

      // Auto-select preferred mode if content is available and user has preference
      if (user?.preferences?.preferredContentMode) {
        const prefMode = user.preferences.preferredContentMode;
        if (prefMode === 'simplified' && data.simplifiedVersions?.some(v => v.level === (user.preferences.readingLevel === 'basic' ? 'easy' : 'moderate'))) {
           const levelToLoad = user.preferences.readingLevel === 'basic' ? 'easy' : 'moderate';
           const version = data.simplifiedVersions.find(v => v.level === levelToLoad);
           if(version) {
               setDisplayedText(version.text);
               setCurrentMode('simplified');
           }
        }
        // Add similar logic for visual, audio if pre-generated content exists
      }

    } catch (err) {
      console.error("Failed to fetch content:", err);
      setError(err.response?.data?.message || `Content for "${topic}" not found or failed to load.`);
    } finally {
      setLoading(false);
    }
  }, [topic, user?.preferences?.preferredContentMode, user?.preferences?.readingLevel]); // Add user preferences as dependencies

  useEffect(() => {
    fetchContentData();
  }, [fetchContentData]);


  const handleModeChange = async (mode, params = {}) => {
    setError(null); // Clear previous mode-specific errors
    if (mode === currentMode && mode !== 'simplified') return; // Avoid re-processing if already in mode (except for re-simplifying)

    setCurrentMode(mode);
    setIsProcessingMode(true);

    try {
      if (mode === 'original') {
        setDisplayedText(content.originalText);
      } else if (mode === 'simplified') {
        const level = params.level || (user?.preferences?.readingLevel === 'basic' ? 'easy' : 'moderate') || 'easy';
        const cachedVersion = content.simplifiedVersions?.find(v => v.level === level);
        if (cachedVersion && params.level) { // Only use cache if specific level requested and found
          setDisplayedText(cachedVersion.text);
        } else {
          const simplifiedData = await simplifyContent(content.topic, level);
          setDisplayedText(simplifiedData.simplifiedText);
          // Optimistically update local content state with the new version
          if (content) {
            const existingVersionIndex = content.simplifiedVersions?.findIndex(v => v.level === level);
            let newSimplifiedVersions = [...(content.simplifiedVersions || [])];
            if (existingVersionIndex > -1) {
              newSimplifiedVersions[existingVersionIndex] = { level, text: simplifiedData.simplifiedText, createdAt: new Date() };
            } else {
              newSimplifiedVersions.push({ level, text: simplifiedData.simplifiedText, createdAt: new Date() });
            }
            setContent(prev => ({ ...prev, simplifiedVersions: newSimplifiedVersions }));
          }
        }
      } else if (mode === 'visual') {
        const format = 'mermaid'; // Or make this configurable
        const cachedMap = content.visualMaps?.find(v => v.format === format);
        if (cachedMap) {
            setVisualMapData(cachedMap);
        } else {
            const mapData = await generateVisualMap(content.topic, format);
            setVisualMapData(mapData.visualMap); // Assuming service returns { visualMap: { format, data, ... } }
             if (content) {
                setContent(prev => ({
                    ...prev,
                    visualMaps: [...(prev.visualMaps || []), mapData.visualMap]
                }));
            }
        }
      } else if (mode === 'audio') {
        // For MVP, assume audio is generated for the currently displayed text
        // In a real app, you might choose original or a specific simplified version
        if (content.audioNarrations && content.audioNarrations.length > 0) {
            setAudioUrl(content.audioNarrations[0].url); // Use first available cached audio
        } else if (displayedText) {
            const narrationData = await generateAudioNarration(content._id, displayedText);
            setAudioUrl(narrationData.narration.url); // Assuming service returns { narration: { url, ... } }
             if (content) {
                setContent(prev => ({
                    ...prev,
                    audioNarrations: [...(prev.audioNarrations || []), narrationData.narration]
                }));
            }
        } else {
            setError("No text available to narrate.");
        }
      }
    } catch (err) {
      console.error(`Failed to switch to ${mode} mode:`, err);
      setError(err.response?.data?.error || `Failed to generate ${mode} content.`);
      // Revert to original text on error if mode processing failed
      // setCurrentMode('original');
      // setDisplayedText(content?.originalText || '');
    } finally {
      setIsProcessingMode(false);
    }
  };

  // Apply dynamic styles based on user preferences
  const userPrefs = user?.preferences;
  const contentStyles = {
    fontSize: userPrefs?.fontSize === 'small' ? '0.875rem' :
              userPrefs?.fontSize === 'large' ? '1.25rem' :
              userPrefs?.fontSize === 'xlarge' ? '1.5rem' : '1rem', // medium/default
    fontFamily: userPrefs?.theme === 'dyslexia' ? 'OpenDyslexic, sans-serif' : 'inherit', // Assuming a 'dyslexia' theme option for font
  };
  // Theme class for container (light, dark, high-contrast)
  const themeClass = userPrefs?.theme === 'dark' ? 'theme-dark bg-gray-800 text-gray-100' :
                     userPrefs?.theme === 'high-contrast' ? 'theme-high-contrast bg-black text-white' :
                     'theme-light bg-gray-50';


  if (loading) return <LoadingSpinner text={`Loading ${topic.replace('-', ' ')}...`} />;

  return (
    <div className={`container mx-auto p-4 md:p-6 min-h-screen ${themeClass}`}>
      <div className="mb-4">
        <Link to="/dashboard" className={`hover:underline text-sm ${userPrefs?.theme === 'dark' || userPrefs?.theme === 'high-contrast' ? 'text-blue-300 hover:text-blue-200' : 'text-primary hover:text-primary-dark'}`}>
            â Back to Dashboard
        </Link>
      </div>

      {error && <ErrorMessage message={error} />}

      {!content && !loading && !error && <InfoMessage message={`No content found for "${topic}".`} />}

      {content && (
        <div>
          <h1 className="text-3xl md:text-4xl font-bold mb-6 capitalize">
            {content.topic.replace(/-/g, ' ')}
          </h1>

          {/* --- Content Mode Switching UI --- */}
          <div className="mb-6 border-b pb-3 flex flex-wrap gap-2 items-center">
            {['original', 'simplified', 'visual', 'audio'].map((modeName) => (
              <button
                key={modeName}
                onClick={() => handleModeChange(modeName)}
                disabled={isProcessingMode && currentMode !== modeName && modeName !== 'original'}
                className={`px-3 py-1.5 rounded text-sm font-medium transition-colors
                  ${currentMode === modeName
                    ? 'bg-primary text-white shadow-md'
                    : `${userPrefs?.theme === 'dark' || userPrefs?.theme === 'high-contrast' ? 'bg-gray-700 hover:bg-gray-600 text-gray-200' : 'bg-gray-200 hover:bg-gray-300 text-gray-700'} disabled:opacity-50 disabled:cursor-not-allowed`}
                `}
              >
                {isProcessingMode && currentMode === modeName ? `Loading ${modeName}...` : modeName.charAt(0).toUpperCase() + modeName.slice(1)}
              </button>
            ))}
            {currentMode === 'simplified' && ( // Show level options for simplified mode
                <select
                    value={(user?.preferences?.readingLevel === 'basic' ? 'easy' : 'moderate') || 'easy'}
                    onChange={(e) => handleModeChange('simplified', { level: e.target.value })}
                    disabled={isProcessingMode}
                    className={`ml-2 px-2 py-1.5 rounded text-sm border ${userPrefs?.theme === 'dark' || userPrefs?.theme === 'high-contrast' ? 'bg-gray-700 border-gray-600 text-gray-200' : 'bg-white border-gray-300'} focus:ring-primary focus:border-primary`}
                >
                    <option value="easy">Easy</option>
                    <option value="moderate">Moderate</option>
                </select>
            )}
          </div>

          {/* --- Content Display Area --- */}
          <article
            style={contentStyles}
            className={`prose prose-sm sm:prose lg:prose-lg xl:prose-xl max-w-none p-4 md:p-6 border rounded shadow-sm
            ${userPrefs?.theme === 'dark' ? 'bg-gray-750 border-gray-700 prose-invert' :
            userPrefs?.theme === 'high-contrast' ? 'bg-gray-900 border-gray-600 prose-invert filter invert-[1] contrast-[2]' : // Example high contrast
            'bg-white border-gray-200'}`}
          >
            {currentMode === 'original' && <div dangerouslySetInnerHTML={{ __html: displayedText.replace(/\n/g, '<br />') }} />}
            {currentMode === 'simplified' && <div dangerouslySetInnerHTML={{ __html: displayedText.replace(/\n/g, '<br />') }} />}

            {currentMode === 'visual' && (
              isProcessingMode && !visualMapData ? <LoadingSpinner text="Generating visual map..." /> :
              visualMapData ? <MermaidDiagram chartData={visualMapData.data} diagramId={`content-map-${content._id}`} /> :
              !isProcessingMode && <InfoMessage message="No visual map generated or available." />
            )}

            {currentMode === 'audio' && (
              isProcessingMode && !audioUrl ? <LoadingSpinner text="Generating audio..." /> :
              audioUrl ? <audio controls src={audioUrl} className="w-full my-2">Your browser does not support the audio element.</audio> :
              !isProcessingMode && <InfoMessage message="No audio generated or available." />
            )}
          </article>

          {/* Interactive Companion (Chatbot) Placeholder */}
          <div className="mt-8 p-4 border rounded shadow-sm bg-white">
            <h3 className="text-xl font-semibold mb-3">Interactive Companion (Coming Soon)</h3>
            <p className="text-gray-600">Ask questions and get personalized help related to this topic.</p>
            {/* <ChatbotComponent topic={content.topic} /> */}
          </div>

        </div>
      )}
    </div>
  );
};

export default ContentPage;

===== File: /src/pages/DashboardPage.jsx =====
import React from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Link } from 'react-router-dom';

const DashboardPage = () => {
  const { user } = useAuth();

  // Example list of topics - you'd likely fetch this later
  const topics = ['photosynthesis', 'gravity', 'react-basics', 'python-loops'];

  return (
    <div>
      <h1 className="text-3xl font-bold mb-4 text-primary">Dashboard</h1>
      <p className="mb-6">Welcome back, {user?.name || user?.email}!</p>

      <h2 className="text-2xl font-semibold mb-3">Available Topics:</h2>
      <ul className="list-disc list-inside space-y-2">
         {topics.map(topic => (
             <li key={topic}>
                 <Link
                     to={`/content/${topic}`}
                     className="text-blue-600 hover:text-blue-800 hover:underline capitalize" // Capitalize for display
                 >
                     {topic.replace('-', ' ')} {/* Replace hyphens for readability */}
                 </Link>
             </li>
         ))}
      </ul>

      {/* Add more dashboard content here later */}
    </div>
  );
};

export default DashboardPage;

===== File: /src/pages/HomePage.jsx =====
import React from 'react';
import { Link } from 'react-router-dom';

const HomePage = () => {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-4 text-primary">Welcome to the Accessible Learning Portal</h1>
      <p className="mb-4">Your journey to personalized learning starts here.</p>
      <Link to="/signup" className="bg-secondary hover:bg-pink-500 text-white font-semibold py-2 px-4 rounded transition duration-200 mr-2">
        Get Started (Sign Up)
      </Link>
      <Link to="/login" className="text-primary hover:underline">
        Already have an account? Login
      </Link>
    </div>
  );
};

export default HomePage;

===== File: /src/pages/LoginPage.jsx =====
// src/pages/LoginPage.jsx (Example Structure)
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate, Link } from 'react-router-dom';

const LoginPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const { login, loading, error, setError } = useAuth(); // Get setError
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null); // Clear previous errors
        const success = await login({ email, password });
        if (success) {
            navigate('/dashboard'); // Redirect on successful login
        }
    };

    return (
        <div className="max-w-md mx-auto mt-10 p-8 border rounded shadow-lg bg-white">
            <h2 className="text-2xl font-bold mb-6 text-center text-primary">Login</h2>
            <form onSubmit={handleSubmit}>
                {error && <p className="mb-4 text-red-500 bg-red-100 p-2 rounded text-sm">{error}</p>}
                <div className="mb-4">
                    <label className="block text-gray-700 mb-2" htmlFor="email">Email</label>
                    <input
                        type="email"
                        id="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary-light"
                        required
                    />
                </div>
                <div className="mb-6">
                    <label className="block text-gray-700 mb-2" htmlFor="password">Password</label>
                    <input
                        type="password"
                        id="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary-light"
                        required
                    />
                </div>
                <button
                    type="submit"
                    disabled={loading}
                    className="w-full bg-primary hover:bg-primary-dark text-white font-bold py-2 px-4 rounded transition duration-200 disabled:opacity-50"
                >
                    {loading ? 'Logging in...' : 'Login'}
                </button>
            </form>
             <p className="mt-4 text-center text-sm text-gray-600">
                Don't have an account?{' '}
                <Link to="/signup" className="text-primary hover:underline">
                    Sign up here
                </Link>
            </p>
        </div>
    );
};

export default LoginPage;

===== File: /src/pages/SignupPage.jsx =====
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate, Link } from 'react-router-dom';

const SignupPage = () => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const { signup, loading, error, setError } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null); // Clear previous errors
        const success = await signup({ name, email, password });
        if (success) {
            navigate('/dashboard'); // Redirect on successful signup
        }
    };

    return (
        <div className="max-w-md mx-auto mt-10 p-8 border rounded shadow-lg bg-white">
            <h2 className="text-2xl font-bold mb-6 text-center text-primary">Create Account</h2>
            <form onSubmit={handleSubmit}>
                 {error && <p className="mb-4 text-red-500 bg-red-100 p-2 rounded text-sm">{error}</p>}
                <div className="mb-4">
                     <label className="block text-gray-700 mb-2" htmlFor="name">Name (Optional)</label>
                     <input
                         type="text"
                         id="name"
                         value={name}
                         onChange={(e) => setName(e.target.value)}
                         className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary-light"
                     />
                 </div>
                <div className="mb-4">
                    <label className="block text-gray-700 mb-2" htmlFor="email">Email</label>
                    <input
                        type="email"
                        id="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary-light"
                        required
                    />
                </div>
                <div className="mb-6">
                    <label className="block text-gray-700 mb-2" htmlFor="password">Password</label>
                    <input
                        type="password"
                        id="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary-light"
                        required
                        minLength="6" // Add basic validation example
                    />
                     <p className="text-xs text-gray-500 mt-1">Minimum 6 characters</p>
                </div>
                <button
                    type="submit"
                    disabled={loading}
                    className="w-full bg-primary hover:bg-primary-dark text-white font-bold py-2 px-4 rounded transition duration-200 disabled:opacity-50"
                >
                    {loading ? 'Creating Account...' : 'Sign Up'}
                </button>
            </form>
            <p className="mt-4 text-center text-sm text-gray-600">
                Already have an account?{' '}
                <Link to="/login" className="text-primary hover:underline">
                    Login here
                </Link>
            </p>
        </div>
    );
};

export default SignupPage;

===== File: /src/pages/admin/AdminContentListPage.jsx =====
// src/pages/admin/AdminContentListPage.jsx
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { getAllContentForAdmin, deleteContent } from '../../services/contentService';
import { useAuth } from '../../contexts/AuthContext'; // For user role check if needed, though route protects

const AdminContentListPage = () => {
  const [contents, setContents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { token } = useAuth(); // To ensure API calls are authorized

  const fetchContents = async () => {
    setLoading(true);
    setError(null);
    try {
      const data = await getAllContentForAdmin();
      setContents(data);
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to fetch content list.');
      console.error("Fetch content list error:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (token) { // Ensure token is available before fetching
        fetchContents();
    }
  }, [token]);

  const handleDelete = async (contentId, topic) => {
    if (window.confirm(`Are you sure you want to delete the topic "${topic}"? This action cannot be undone.`)) {
      try {
        await deleteContent(contentId);
        setContents(prevContents => prevContents.filter(c => c._id !== contentId));
        alert(`Topic "${topic}" deleted successfully.`);
      } catch (err) {
        setError(err.response?.data?.error || `Failed to delete topic "${topic}".`);
        console.error("Delete content error:", err);
      }
    }
  };

  if (loading) return <div className="p-4">Loading content...</div>;

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-primary">Manage Content</h1>
        <Link
          to="/admin/content/create"
          className="bg-secondary hover:bg-pink-500 text-white font-semibold py-2 px-4 rounded transition duration-200"
        >
          Create New Content
        </Link>
      </div>

      {error && <p className="text-red-500 bg-red-100 p-3 rounded mb-4">{error}</p>}

      {contents.length === 0 && !loading && (
        <p>No content found. Get started by creating some!</p>
      )}

      {contents.length > 0 && (
        <div className="overflow-x-auto bg-white shadow-md rounded-lg">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Topic</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tags</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created At</th>
                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {contents.map((content) => (
                <tr key={content._id}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900 capitalize">{content.topic?.replace('-', ' ')}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-500">{content.tags?.join(', ')}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-500">{new Date(content.createdAt).toLocaleDateString()}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <Link to={`/admin/content/edit/${content._id}`} className="text-indigo-600 hover:text-indigo-900 mr-3">
                      Edit
                    </Link>
                    <button
                      onClick={() => handleDelete(content._id, content.topic)}
                      className="text-red-600 hover:text-red-900"
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default AdminContentListPage;

===== File: /src/pages/admin/AdminCreateContentPage.jsx =====
// src/pages/admin/AdminCreateContentPage.jsx
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { createContent } from '../../services/contentService';

// A simple reusable form field component (optional, but can reduce repetition)
const FormField = ({ id, label, type = 'text', value, onChange, required = false, textarea = false, placeholder }) => (
  <div className="mb-4">
    <label htmlFor={id} className="block text-sm font-medium text-gray-700 mb-1">{label}{required && <span className="text-red-500">*</span>}</label>
    {textarea ? (
      <textarea
        id={id}
        name={id}
        rows="10"
        value={value}
        onChange={onChange}
        required={required}
        placeholder={placeholder}
        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
      />
    ) : (
      <input
        type={type}
        id={id}
        name={id}
        value={value}
        onChange={onChange}
        required={required}
        placeholder={placeholder}
        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
      />
    )}
  </div>
);


const AdminCreateContentPage = () => {
  const [formData, setFormData] = useState({
    topic: '',
    originalText: '',
    tags: '', // Comma-separated string for tags
    imageUrls: '', // Comma-separated string for image URLs
    // videoExplainers and audioNarrations might be handled differently in a more complex UI
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    const contentData = {
      ...formData,
      tags: formData.tags ? formData.tags.split(',').map(tag => tag.trim()).filter(Boolean) : [],
      imageUrls: formData.imageUrls ? formData.imageUrls.split(',').map(url => url.trim()).filter(Boolean) : [],
      // For MVP, videoExplainers and audioNarrations can be empty arrays or handled later
      videoExplainers: [],
      audioNarrations: [],
    };

    try {
      await createContent(contentData);
      alert('Content created successfully!');
      navigate('/admin/content');
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to create content.');
      console.error("Create content error:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <Link to="/admin/content" className="text-primary hover:underline mb-4 inline-block">â Back to Content List</Link>
      <h1 className="text-3xl font-bold text-primary mb-6">Create New Content</h1>

      <form onSubmit={handleSubmit} className="max-w-2xl mx-auto bg-white p-8 shadow-md rounded-lg">
        {error && <p className="text-red-500 bg-red-100 p-3 rounded mb-4">{error}</p>}

        <FormField
          id="topic"
          label="Topic Title"
          value={formData.topic}
          onChange={handleChange}
          required
          placeholder="e.g., Photosynthesis Basics"
        />
        <FormField
          id="originalText"
          label="Original Content Text"
          value={formData.originalText}
          onChange={handleChange}
          textarea
          required
          placeholder="Enter the full educational text here..."
        />
        <FormField
          id="tags"
          label="Tags (comma-separated)"
          value={formData.tags}
          onChange={handleChange}
          placeholder="e.g., biology, science, plants"
        />
        <FormField
          id="imageUrls"
          label="Image URLs (comma-separated)"
          value={formData.imageUrls}
          onChange={handleChange}
          placeholder="e.g., https://example.com/image1.jpg, https://example.com/image2.png"
        />

        {/* More complex fields for videoExplainers, audioNarrations could be added here */}
        {/* For example, a way to add multiple URL inputs for videos */}

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-primary hover:bg-primary-dark text-white font-bold py-2 px-4 rounded transition duration-200 disabled:opacity-50"
        >
          {loading ? 'Creating...' : 'Create Content'}
        </button>
      </form>
    </div>
  );
};

export default AdminCreateContentPage;

===== File: /src/pages/admin/AdminDashboardPage.jsx =====
// src/pages/admin/AdminDashboardPage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext'; // To greet the admin

// Example Icons (using simple text, replace with actual icon components if you have them)
const ContentIcon = () => <span className="text-2xl mr-2">ð</span>; // Simple emoji icon
const UsersIcon = () => <span className="text-2xl mr-2">ð¥</span>;
const SettingsIcon = () => <span className="text-2xl mr-2">âï¸</span>;
const AnalyticsIcon = () => <span className="text-2xl mr-2">ð</span>;


const AdminDashboardPage = () => {
  const { user } = useAuth();

  // Placeholder data - in a real app, you might fetch some stats here
  const stats = {
    totalContent: 15, // Example: fetch from an API endpoint
    totalUsers: 120,  // Example
    pendingApprovals: 0 // Example
  };

  return (
    <div className="container mx-auto p-4 md:p-6">
      <h1 className="text-3xl font-bold text-primary mb-4">Admin Dashboard</h1>
      <p className="mb-8 text-lg text-gray-700">
        Welcome back, <span className="font-semibold">{user?.name || user?.email || 'Admin'}</span>!
      </p>

      {/* Quick Stats Section (Optional - requires backend data) */}
      {/*
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-xl font-semibold text-gray-700 mb-2">Total Content Topics</h3>
          <p className="text-3xl font-bold text-primary">{stats.totalContent}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-xl font-semibold text-gray-700 mb-2">Registered Users</h3>
          <p className="text-3xl font-bold text-primary">{stats.totalUsers}</p>
        </div>
        {stats.pendingApprovals > 0 && (
          <div className="bg-orange-100 p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-semibold text-orange-700 mb-2">Pending Approvals</h3>
            <p className="text-3xl font-bold text-orange-600">{stats.pendingApprovals}</p>
          </div>
        )}
      </div>
      */}

      <h2 className="text-2xl font-semibold text-gray-800 mb-6">Management Sections</h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Manage Content Card */}
        <Link
          to="/admin/content"
          className="block p-6 bg-white rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-200 ease-in-out transform hover:-translate-y-1"
        >
          <div className="flex items-center mb-3">
            <ContentIcon />
            <h3 className="text-xl font-semibold text-gray-700">Manage Content</h3>
          </div>
          <p className="text-gray-600 text-sm">
            Create, edit, and delete learning topics and their associated materials.
          </p>
        </Link>

        {/* Manage Users Card (Future Feature) */}
        <div
          // to="/admin/users" // Uncomment when implemented
          className="block p-6 bg-gray-100 rounded-lg shadow-md cursor-not-allowed opacity-60"
          title="User management coming soon"
        >
          <div className="flex items-center mb-3">
            <UsersIcon />
            <h3 className="text-xl font-semibold text-gray-500">Manage Users</h3>
          </div>
          <p className="text-gray-500 text-sm">
            View and manage user accounts. (Coming Soon)
          </p>
        </div>

        {/* Platform Settings Card (Future Feature) */}
        <div
          // to="/admin/settings" // Uncomment when implemented
          className="block p-6 bg-gray-100 rounded-lg shadow-md cursor-not-allowed opacity-60"
          title="Platform settings coming soon"
        >
          <div className="flex items-center mb-3">
            <SettingsIcon />
            <h3 className="text-xl font-semibold text-gray-500">Platform Settings</h3>
          </div>
          <p className="text-gray-500 text-sm">
            Configure global settings for the learning portal. (Coming Soon)
          </p>
        </div>

        {/* Analytics/Reports Card (Future Feature) */}
        <div
          // to="/admin/analytics" // Uncomment when implemented
          className="block p-6 bg-gray-100 rounded-lg shadow-md cursor-not-allowed opacity-60"
          title="Analytics coming soon"
        >
          <div className="flex items-center mb-3">
            <AnalyticsIcon />
            <h3 className="text-xl font-semibold text-gray-500">Analytics & Reports</h3>
          </div>
          <p className="text-gray-500 text-sm">
            View usage statistics and learning progress insights. (Coming Soon)
          </p>
        </div>

        {/* Add more admin sections as cards here */}
      </div>
    </div>
  );
};

export default AdminDashboardPage;

===== File: /src/pages/admin/AdminEditContentPage.jsx =====
// src/pages/admin/AdminEditContentPage.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { getContentByIdForAdmin, updateContent } from '../../services/contentService';
import MermaidDiagram from '../../components/common/MermaidDiagram'; // Adjust path if needed

// Reusable FormField component (can be moved to a common components folder)
const FormField = ({ id, label, type = 'text', value, onChange, required = false, textarea = false, placeholder, disabled = false }) => (
  <div className="mb-4">
    <label htmlFor={id} className="block text-sm font-medium text-gray-700 mb-1">{label}{required && !disabled && <span className="text-red-500">*</span>}</label>
    {textarea ? (
      <textarea
        id={id}
        name={id}
        rows="10"
        value={value}
        onChange={onChange}
        required={required && !disabled}
        placeholder={placeholder}
        disabled={disabled}
        className={`w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary ${disabled ? 'bg-gray-100 cursor-not-allowed' : ''}`}
      />
    ) : (
      <input
        type={type}
        id={id}
        name={id}
        value={value}
        onChange={onChange}
        required={required && !disabled}
        placeholder={placeholder}
        disabled={disabled}
        className={`w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary ${disabled ? 'bg-gray-100 cursor-not-allowed' : ''}`}
      />
    )}
  </div>
);


const AdminEditContentPage = () => {
  const { contentId } = useParams();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    topic: '',
    originalText: '',
    tags: '', // Comma-separated string for UI
    imageUrls: '', // Comma-separated string for UI
    videoExplainers: [], // Array of objects: { source, url, title, description }
    audioNarrations: [], // Array of objects: { language, voice, url }
    simplifiedVersions: [], // For display
    visualMaps: [],         // For display
  });

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchContent = async () => {
      setLoading(true);
      setError(null);
      try {
        const data = await getContentByIdForAdmin(contentId);
        setFormData({
          topic: data.topic || '',
          originalText: data.originalText || '',
          tags: data.tags?.join(', ') || '',
          imageUrls: data.media?.imageUrls?.join(', ') || '',
          videoExplainers: data.videoExplainers || [],
          audioNarrations: data.audioNarrations || [],
          simplifiedVersions: data.simplifiedVersions || [],
          visualMaps: data.visualMaps || [],
        });
      } catch (err) {
        setError(err.response?.data?.error || `Failed to fetch content (ID: ${contentId}) for editing.`);
        console.error("Fetch content for edit error:", err);
      } finally {
        setLoading(false);
      }
    };
    if (contentId) {
        fetchContent();
    } else {
        setError("Content ID is missing.");
        setLoading(false);
    }
  }, [contentId]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  // --- Handlers for videoExplainers array field ---
  const handleVideoChange = (index, field, value) => {
    const updatedVideos = formData.videoExplainers.map((video, i) =>
      i === index ? { ...video, [field]: value } : video
    );
    setFormData(prev => ({ ...prev, videoExplainers: updatedVideos }));
  };

  const handleAddVideoField = () => {
    setFormData(prev => ({
      ...prev,
      videoExplainers: [
        ...prev.videoExplainers,
        { source: 'youtube', url: '', title: '', description: '' }
      ]
    }));
  };

  const handleRemoveVideoField = (index) => {
    setFormData(prev => ({
      ...prev,
      videoExplainers: prev.videoExplainers.filter((_, i) => i !== index)
    }));
  };

  // --- Handlers for audioNarrations (example if you implement a similar UI) ---
  const handleAudioChange = (index, field, value) => {
    const updatedAudios = formData.audioNarrations.map((audio, i) =>
        i === index ? { ...audio, [field]: value } : audio
    );
    setFormData(prev => ({ ...prev, audioNarrations: updatedAudios }));
  };

  const handleAddAudioField = () => {
    setFormData(prev => ({
        ...prev,
        audioNarrations: [
            ...prev.audioNarrations,
            { language: 'en-US', voice: 'default', url: '' }
        ]
    }));
  };

  const handleRemoveAudioField = (index) => {
    setFormData(prev => ({
        ...prev,
        audioNarrations: prev.audioNarrations.filter((_, i) => i !== index)
    }));
  };


  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.topic || !formData.originalText) {
        setError("Topic and Original Text are required.");
        return;
    }
    setSaving(true);
    setError(null);

    const contentDataToUpdate = {
      topic: formData.topic,
      originalText: formData.originalText,
      tags: formData.tags ? formData.tags.split(',').map(tag => tag.trim()).filter(Boolean) : [],
      imageUrls: formData.imageUrls ? formData.imageUrls.split(',').map(url => url.trim()).filter(Boolean) : [],
      videoExplainers: formData.videoExplainers.filter(video => video.url && video.url.trim() !== ''),
      audioNarrations: formData.audioNarrations.filter(audio => audio.url && audio.url.trim() !== ''),
      // simplifiedVersions and visualMaps are generally not sent for update from admin UI unless direct edit is intended
    };

    try {
      await updateContent(contentId, contentDataToUpdate);
      alert('Content updated successfully!');
      navigate('/admin/content');
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to update content.');
      console.error("Update content error:", err);
    } finally {
      setSaving(false);
    }
  };

  if (loading) return <div className="p-6 text-center">Loading content details...</div>;
  if (error && !formData.topic) return <div className="p-6 text-center text-red-600 bg-red-50">{error} <Link to="/admin/content" className="text-blue-500 underline">Go back</Link></div>;


  return (
    <div className="container mx-auto p-4 md:p-6">
      <div className="mb-6">
        <Link to="/admin/content" className="text-primary hover:underline text-sm">
          â Back to Content List
        </Link>
      </div>
      <h1 className="text-2xl md:text-3xl font-bold text-primary mb-6">
        Edit Content: <span className="capitalize">{formData.topic || "Loading topic..."}</span>
      </h1>

      <form onSubmit={handleSubmit} className="max-w-3xl mx-auto bg-white p-6 md:p-8 shadow-lg rounded-lg">
        {error && <p className="text-red-600 bg-red-100 p-3 rounded mb-4 text-sm">{error}</p>}

        <fieldset className="border border-gray-300 p-4 rounded-md mb-6">
            <legend className="text-lg font-semibold text-gray-700 px-2">Core Content</legend>
            <FormField id="topic" label="Topic Title" value={formData.topic} onChange={handleChange} required />
            <FormField id="originalText" label="Original Content Text" value={formData.originalText} onChange={handleChange} textarea required />
            <FormField id="tags" label="Tags (comma-separated)" value={formData.tags} onChange={handleChange} placeholder="e.g., biology, science, plants" />
            <FormField id="imageUrls" label="Image URLs (comma-separated)" value={formData.imageUrls} onChange={handleChange} placeholder="e.g., https://example.com/image.jpg" />
        </fieldset>

        {/* --- Section for Video Explainers --- */}
        <fieldset className="border border-gray-300 p-4 rounded-md mb-6">
          <legend className="text-lg font-semibold text-gray-700 px-2">Video Explainers</legend>
          {formData.videoExplainers.map((video, index) => (
            <div key={index} className="mb-4 p-3 border border-gray-200 rounded-md relative bg-gray-50">
              <button
                type="button"
                onClick={() => handleRemoveVideoField(index)}
                className="absolute top-2 right-2 text-red-500 hover:text-red-700 text-xs px-2 py-1 bg-white border border-red-300 rounded"
                title="Remove Video"
              >
                Remove
              </button>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2">
                <FormField id={`videoUrl-${index}`} label="URL" placeholder="https://www.youtube.com/watch?v=..." value={video.url} onChange={(e) => handleVideoChange(index, 'url', e.target.value)} required />
                <div>
                  <label htmlFor={`videoSource-${index}`} className="block text-sm font-medium text-gray-700 mb-1">Source</label>
                  <select
                    id={`videoSource-${index}`}
                    value={video.source}
                    onChange={(e) => handleVideoChange(index, 'source', e.target.value)}
                    className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm focus:outline-none focus:ring-primary focus:border-primary"
                  >
                    <option value="youtube">YouTube</option>
                    <option value="vimeo">Vimeo</option>
                    <option value="custom_upload">Custom Upload</option>
                    <option value="generated">AI Generated</option>
                  </select>
                </div>
              </div>
              <FormField id={`videoTitle-${index}`} label="Title (optional)" placeholder="Video Title" value={video.title} onChange={(e) => handleVideoChange(index, 'title', e.target.value)} />
              <FormField id={`videoDesc-${index}`} label="Description (brief, optional)" placeholder="Brief description" value={video.description} onChange={(e) => handleVideoChange(index, 'description', e.target.value)} textarea />
            </div>
          ))}
          <button
            type="button"
            onClick={handleAddVideoField}
            className="mt-2 bg-green-100 hover:bg-green-200 text-green-700 text-sm font-medium py-2 px-3 rounded-md transition duration-150 border border-green-300"
          >
            + Add Video Explainer
          </button>
        </fieldset>

        {/* --- Section for Audio Narrations (Example Structure) --- */}
        <fieldset className="border border-gray-300 p-4 rounded-md mb-6">
            <legend className="text-lg font-semibold text-gray-700 px-2">Audio Narrations</legend>
            {formData.audioNarrations.map((audio, index) => (
                <div key={index} className="mb-4 p-3 border border-gray-200 rounded-md relative bg-gray-50">
                    <button type="button" onClick={() => handleRemoveAudioField(index)} className="absolute top-2 right-2 text-red-500 hover:text-red-700 text-xs px-2 py-1 bg-white border border-red-300 rounded" title="Remove Audio">Remove</button>
                    <FormField id={`audioUrl-${index}`} label="Audio URL" placeholder="https://example.com/audio.mp3" value={audio.url} onChange={(e) => handleAudioChange(index, 'url', e.target.value)} required />
                    {/* You could add fields for language and voice if needed */}
                    {/* <FormField id={`audioLang-${index}`} label="Language" value={audio.language} onChange={(e) => handleAudioChange(index, 'language', e.target.value)} /> */}
                </div>
            ))}
            <button type="button" onClick={handleAddAudioField} className="mt-2 bg-green-100 hover:bg-green-200 text-green-700 text-sm font-medium py-2 px-3 rounded-md transition duration-150 border border-green-300">
                + Add Audio Narration
            </button>
        </fieldset>


        {/* --- Section for AI-Generated Simplified Versions (Read-Only) --- */}
        {formData.simplifiedVersions && formData.simplifiedVersions.length > 0 && (
          <fieldset className="border border-gray-300 p-4 rounded-md mb-6">
            <legend className="text-lg font-semibold text-gray-700 px-2">AI-Generated Simplified Texts</legend>
            {formData.simplifiedVersions.map((version, index) => (
              <div key={index} className="mb-3 p-3 border border-gray-200 rounded-md bg-gray-50">
                <div className="flex justify-between items-center mb-1">
                    <p className="text-sm font-semibold text-gray-700">Level: <span className="capitalize font-normal bg-blue-100 text-blue-700 px-2 py-0.5 rounded-full text-xs">{version.level}</span></p>
                    <p className="text-xs text-gray-500">Generated: {new Date(version.createdAt).toLocaleString()}</p>
                </div>
                <div className="mt-1 p-2 bg-white border rounded max-h-48 overflow-y-auto text-sm">
                  <pre className="whitespace-pre-wrap break-words">{version.text}</pre>
                </div>
              </div>
            ))}
            {/* Optional: Button to clear cached simplified versions */}
          </fieldset>
        )}

        {/* --- Section for AI-Generated Visual Maps (Read-Only) --- */}
        {formData.visualMaps && formData.visualMaps.length > 0 && (
          <fieldset className="border border-gray-300 p-4 rounded-md mb-6">
            <legend className="text-lg font-semibold text-gray-700 px-2">AI-Generated Visual Maps</legend>
            {formData.visualMaps.map((vMap, index) => (
              <div key={index} className="mb-3 p-3 border border-gray-200 rounded-md bg-gray-50">
                <div className="flex justify-between items-center mb-1">
                    <p className="text-sm font-semibold text-gray-700">Format: <span className="capitalize font-normal bg-purple-100 text-purple-700 px-2 py-0.5 rounded-full text-xs">{vMap.format}</span></p>
                    <p className="text-xs text-gray-500">Generated: {new Date(vMap.createdAt).toLocaleString()}</p>
                </div>
                <div className="mt-1 p-2 bg-white border rounded max-h-96 overflow-y-auto">
                  {vMap.format === 'mermaid' ? (
                    <MermaidDiagram chartData={vMap.data} diagramId={`admin-map-${contentId}-${index}`} />
                  ) : (
                    <pre className="text-sm whitespace-pre-wrap break-words">{vMap.data}</pre>
                  )}
                </div>
                {vMap.notes && <p className="text-xs text-gray-600 mt-1 italic">Notes: {vMap.notes}</p>}
              </div>
            ))}
            {/* Optional: Button to clear cached visual maps */}
          </fieldset>
        )}

        <button
          type="submit"
          disabled={saving || loading}
          className="w-full bg-primary hover:bg-primary-dark text-white font-bold py-2.5 px-4 rounded-md transition duration-200 disabled:opacity-60"
        >
          {saving ? 'Saving Changes...' : 'Save Changes'}
        </button>
      </form>
    </div>
  );
};

export default AdminEditContentPage;

===== File: /src/reportWebVitals.js =====
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


===== File: /src/services/api.js =====
// src/services/api.js
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL;
console.log("API URL:", API_URL);


const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor to add the token to requests
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default api;

===== File: /src/services/authService.js =====
// src/services/authService.js
import api from './api';

export const loginUser = async (credentials) => {
  const response = await api.post('/auth/login', credentials);
  if (response.data && response.data.token) {
    localStorage.setItem('authToken', response.data.token); // Store token
    // You might want to store user info in context/state management too
  }
  return response.data; // { _id, name, email, role, preferences, token }
};

export const signupUser = async (userData) => {
  const response = await api.post('/auth/signup', userData);
  if (response.data && response.data.token) {
    localStorage.setItem('authToken', response.data.token); // Store token
  }
  return response.data; // { _id, name, email, role, preferences, token }
};

export const logoutUser = () => {
  localStorage.removeItem('authToken');
  // Also clear any user state in your app's state management
};

export const getUserProfile = async () => {
   try {
     const response = await api.get('/auth/me');
     return response.data; // { _id, name, email, preferences, createdAt }
   } catch (error) {
     console.error("Error fetching user profile:", error.response ? error.response.data : error.message);
     if (error.response && error.response.status === 401) {
        logoutUser(); // If unauthorized, log out the user
     }
     throw error; // Re-throw to be handled by the calling component
   }
};

export const updateUserPreferences = async (preferencesData) => {
    try {
        const response = await api.put('/auth/preferences', preferencesData);
        return response.data; // { message, preferences }
    } catch (error) {
        console.error("Error updating preferences:", error.response ? error.response.data : error.message);
        throw error;
    }
};

===== File: /src/services/contentService.js =====
// src/services/contentService.js
import api from './api';

// --- User-facing functions (from Phase 1, ensure they exist) ---
export const getContentByTopic = async (topic) => {
  const response = await api.get(`/content/topic/${topic}`); // Corrected path
  return response.data;
};

export const simplifyContent = async (topic, level = 'easy') => {
  const response = await api.post(`/content/simplify`, { topic, level });
  return response.data;
};

export const generateVisualMap = async (topic, format = 'mermaid') => {
  const response = await api.post(`/content/visual-map`, { topic, format });
  return response.data;
};

export const generateAudioNarration = async (contentId, textToNarrate) => { // Simplified params for now
  // Assuming backend takes contentId and figures out text or uses default
  const response = await api.post(`/content/generate-audio`, { contentId, textToNarrate });
  return response.data;
};

export const findVideoExplainers = async (contentId, query) => {
  const response = await api.post(`/content/find-videos`, { contentId, query });
  return response.data; // Backend placeholder returns content with video added
};


// --- Admin-facing functions (NEW for Phase 3) ---
export const getAllContentForAdmin = async () => {
  // Backend route /api/content/ (GET) is protected but not admin-only by default in your current routes.
  // Let's assume it returns enough for admin listing or we create a new admin-specific one.
  // For now, we'll use the existing GET /api/content, which might need adjustment for admin needs.
  const response = await api.get('/content'); // This route is already `protect`
  return response.data; // Returns [{ topic, tags, createdAt }, ...]
};

export const getContentByIdForAdmin = async (contentId) => {
  const response = await api.get(`/content/${contentId}`); // This route is `protect, isAdmin`
  return response.data; // Returns full content object
};

export const createContent = async (contentData) => {
  // contentData = { topic, originalText, tags, imageUrls, videoExplainers, audioNarrations }
  const response = await api.post('/content/create', contentData); // `protect, isAdmin`
  return response.data;
};

export const updateContent = async (contentId, contentData) => {
  const response = await api.put(`/content/${contentId}`, contentData); // `protect, isAdmin`
  return response.data;
};

export const deleteContent = async (contentId) => {
  const response = await api.delete(`/content/${contentId}`); // `protect, isAdmin`
  return response.data; // Returns { message: 'Content removed successfully.' }
};

===== File: /src/setupTests.js =====
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
